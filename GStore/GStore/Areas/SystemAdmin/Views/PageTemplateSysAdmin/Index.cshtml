@model IEnumerable<GStore.Models.PageTemplate>
@using GStore.AppHtmlHelpers
@using GStore.Data
<style>
	table th {
		text-align: center;
	}

	table td {
		text-align: center;
	}
</style>
<h2 class="jumbotron SysAdminIndexPageTitle col-md-12">Page Template Manager</h2>
<p>
	@Html.ActionLink("Create a New Page Template", "Create", null, new { @class = "btn btn-info" })
</p>

@if (Model.Count() == 0)
{
	<p>
		There are no Page Templates found in the database.
		<br />
		@Html.ActionLink("Click here to Create a New Page Template", "Create", null, new { @class = "btn btn-info" })
	</p>
}
else
{

	<table class="table table-hover table-striped">
		<tr>
			<th>@Html.ActionSortLink("Default Sort", "Index", string.Empty)</th>
			<th class="small">
				@Html.ActionSortLinkFor(model => model.PageTemplateId, "Index")
			</th>
			<th class="small text-left">
				@Html.ActionSortLinkFor(model => model.Name, "Index")
			</th>
			<th class="small text-left">
				@Html.ActionSortLinkFor(model => model.Order, "Index")
			</th>
			<th class="small text-left">
				@Html.ActionSortLinkFor(model => model.ViewName, "Index")
			</th>
			<th class="small text-left">
				@Html.ActionSortLinkFor(model => model.LayoutName, "Index")
			</th>
			<th class="small text-left">
				@Html.ActionSortLinkFor(model => model.Sections, "Index")
			</th>
			<th class="small">
				@Html.ActionSortLink("Status", "Index", "Status")
			</th>
			<th class="small">
				@Html.ActionSortLinkFor(model => model.IsPending, "Index")
			</th>
			<th class="small">
				@Html.ActionSortLinkFor(model => model.StartDateTimeUtc, "Index")
			</th>
			<th class="small">
				@Html.ActionSortLinkFor(model => model.EndDateTimeUtc, "Index")
			</th>
			<th class="small">
				@Html.ActionSortLinkFor(model => model.CreateDateTimeUtc, "Index")
			</th>
			<th class="small">
				@Html.ActionSortLinkFor(model => model.CreatedBy, "Index")
			</th>
			<th class="small">
				@Html.ActionSortLinkFor(model => model.UpdateDateTimeUtc, "Index")
			</th>
			<th class="small">
				@Html.ActionSortLinkFor(model => model.UpdatedBy, "Index")
			</th>
			<th class="small"></th>
		</tr>

		@foreach (var item in Model)
		{
			bool pageTemplateIsActive = item.IsActiveDirect();
			bool isAllActive = pageTemplateIsActive;
			string rowClass = (isAllActive ? "" : "text-warning");

			<tr class="@(rowClass)" onclick="GoToUrl('@Html.JavaScriptEncode(Url.Action("Details", new { @id = item.PageTemplateId }))');">
				<td>
					@Html.ActionLink("Details", "Details", new { id = item.PageTemplateId }, new { @class = "btn-sm btn-success" })
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.PageTemplateId)
				</td>
				<td class="text-left">
					@Html.DisplayFor(modelItem => item.Name)
				</td>
				<td class="text-left">
					@Html.DisplayFor(modelItem => item.Order)
				</td>
				<td class="text-left">
					@Html.DisplayFor(modelItem => item.ViewName)
				</td>
				<td class="text-left">
					@Html.DisplayFor(modelItem => item.LayoutName)
				</td>
				<td class="text-left">
					@item.Sections.AsQueryable().WhereIsActive().Count()
					&nbsp;/&nbsp;
					@item.Sections.Count()
				</td>
				<td>
					@if (pageTemplateIsActive)
					{
						<span class="text-success">Active</span>
					}
					else
					{
						<span class="text-warning"><strong>Inactive</strong></span>
						<br />
						@Html.ActionLink("Activate Page Template", "Activate", new { id = item.PageTemplateId }, new { @class = "btn btn-sm btn-warning" });
					}
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.IsPending)
				</td>
				<td>
					<small>@Html.DisplayFor(modelItem => item.StartDateTimeUtc)</small>
				</td>
				<td>
					<small>@Html.DisplayFor(modelItem => item.EndDateTimeUtc)</small>
				</td>
				<td>
					<small>@Html.DisplayFor(modelItem => item.CreateDateTimeUtc)</small>
				</td>
				<td>
					<small>@Html.DisplayFor(modelItem => item.CreatedBy.UserId)</small>
				</td>
				<td>
					<small>@Html.DisplayFor(modelItem => item.UpdateDateTimeUtc)</small>
				</td>
				<td>
					<small>@Html.DisplayFor(modelItem => item.UpdatedBy.UserId)</small>
				</td>
				<td>
					<span style="white-space: nowrap">
						@Html.ActionLink("Edit", "Edit", new { id = item.PageTemplateId }, new { @class = "btn-sm btn-warning" })
						@Html.ActionLink("Delete", "Delete", new { id = item.PageTemplateId }, new { @class = "btn-sm btn-danger" })
					</span>
				</td>
			</tr>
		}

	</table>
	<p>
		@Html.ActionLink("Create a New Page Template", "Create", null, new { @class = "btn btn-info" })
	</p>

}

<div class="row">
	<div class="col-xs-12 text-left">
		@{
			string pageTemplatePath = "~/Views/Page";
			string pageTemplateFilePath = Server.MapPath(pageTemplatePath);
			if (!System.IO.Directory.Exists(pageTemplateFilePath))
			{
				@:<h1 class="text-danger">Page Template folder not found in file system</h1>
			}
			else
			{
				@:<hr/>
				@:<table class="table table-bordered table-striped">
					@:<tr>
						@:<td colspan="6" align="center">Page Templates in File System</td>
					@:</tr>
					@:<tr>
						@:<th>@Html.DisplayNameFor(model => model.ViewName)</th>
						@:<th>Created</th>
						@:<th>Modified</th>
						@:<th>Size</th>
						@:<th></th>
					@:</tr>
				System.IO.DirectoryInfo dir = new DirectoryInfo(pageTemplateFilePath);
				FileInfo[] files = dir.GetFiles("*.cshtml", SearchOption.TopDirectoryOnly).Where(f => !f.Name.StartsWith("_")).OrderBy(f => f.Name).ToArray();
				foreach (FileInfo file in files)
				{
					<tr>
						<td>
							@{string viewName = file.Name.Substring(0, file.Name.Length - file.Extension.Length);}
							'@(viewName)'<br />
							@Html.ActionLink("Create Page Template for this File", "Create", new { ViewName = viewName }, new { @class = "btn btn-sm btn-info" } )
						</td>
						<td>
							@file.CreationTime.ToString()
						</td>

						<td>
							@file.LastWriteTime.ToString()
						</td>

						<td>
							@file.Length.ToByteString()
						</td>
					</tr>
				}
					@:</table>
			}
		}
	</div>
</div>
