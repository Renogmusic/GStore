@model GStore.Models.WebFormField
@using GStore.Models
@using GStore.AppHtmlHelpers
@using GStore.Data
@using System.ComponentModel.DataAnnotations
@{
	int labelMdColspan = Model.WebForm.LabelMdColSpan;
	int fieldMdColspan = Model.WebForm.FieldMdColSpan;
	if (labelMdColspan < 1 || labelMdColspan > 11)
	{
		labelMdColspan = 3;
	}
	if (fieldMdColspan < 1 || fieldMdColspan > 11)
	{
		fieldMdColspan = 7;
	}

	string prefix = Html.NameForModel().ToHtmlString();
	string textValue = (Html.GetModelStateValue(prefix + Model.Name.ToHtmlAttribute(), typeof(string)) ?? string.Empty).ToString();
	if (string.IsNullOrEmpty(textValue))
	{
		
	}

	string align = "title-align";
}
<div class="form-group @(align)">
	@{
		if (!string.IsNullOrEmpty(Model.HelpLabelTopText))
		{
			<label class="col-xs-12 col-md-offset-@(labelMdColspan) col-md-@(fieldMdColspan) help-label help-label-top @(align)">@(Model.HelpLabelTopText)</label>
		}
	}
	<label class="col-md-@(labelMdColspan) control-label @(align)">@(Model.LabelText)</label>
	<div class="col-md-@(fieldMdColspan) @(align)">
		@{
			bool usedCustomDisplay = false;

			switch (Model.DataType)
			{
				case GStoreValueDataType.YesNo:
					break;
				case GStoreValueDataType.Integer:
					break;
				case GStoreValueDataType.Decimal:
					break;
				case GStoreValueDataType.IntegerRange:
					break;
				case GStoreValueDataType.DecimalRange:
					break;
				case GStoreValueDataType.SingleLineText:
					break;
				case GStoreValueDataType.MultiLineText:

					int rows = 10;
					if ((Model.TextAreaRows.HasValue) && (Model.TextAreaRows.Value > 0))
					{
						rows = Model.TextAreaRows.Value;
					}
					int cols = 40;
					if ((Model.TextAreaColumns.HasValue) && (Model.TextAreaColumns.Value > 10))
					{
						rows = Model.TextAreaColumns.Value;
					}
					@Html.TextArea(Model.Name.ToHtmlAttribute(), textValue, Model.TextAreaRows ?? 8, Model.TextAreaColumns ?? 40, htmlAttributes: new { @class = "form-control", rows = rows, cols = cols })
					usedCustomDisplay = true;
					break;
				case GStoreValueDataType.Html:
				@(Html.TextArea(Model.Name.ToHtmlAttribute(), textValue, Model.TextAreaRows ?? 8, Model.TextAreaColumns ?? 40, htmlAttributes: new { @class = "form-control" }))
					usedCustomDisplay = true;
					break;
				case GStoreValueDataType.ValueListItemDropdown:
					break;
				case GStoreValueDataType.ValueListItemRadio:
					break;
				case GStoreValueDataType.ValueListItemMultiCheckbox:
					break;
				case GStoreValueDataType.ExternalLinkToPage:
					break;
				case GStoreValueDataType.ExternalLinkToImage:
					break;
				case GStoreValueDataType.InternalLinkToAction:
					break;
				case GStoreValueDataType.InternalLinkToPageById:
					break;
				case GStoreValueDataType.InternalLinkToPageByUrl:
					break;
				case GStoreValueDataType.InternalLinkToImageByUrl:
					break;
				default:
					break;
			}

			if (!usedCustomDisplay)
			{
		<!-- Default text box -->
				@Html.TextBox(Model.Name.ToHtmlAttribute(), textValue, htmlAttributes: new { @class = "form-control " + align })
			}
		}

	</div>
	@Html.ValidationMessage(Model.Name.ToHtmlAttribute(), new { @class = "text-danger row col-md-offset-" + labelMdColspan + " col-md-" + fieldMdColspan + " help-label " + align })
	@{
		if (!string.IsNullOrEmpty(Model.HelpLabelBottomText))
		{
			<label class="col-xs-12 col-md-offset-@(labelMdColspan) col-md-@(fieldMdColspan) help-label help-label-bottom @(align)">@(Model.HelpLabelBottomText)</label>
		}
	}
</div>
