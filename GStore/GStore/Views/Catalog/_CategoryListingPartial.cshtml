@model GStore.Models.ViewModels.CatalogViewModel
@{
	List<TreeNode<ProductCategory>> categoryNodes = null;
	string catalogTopLinkText = string.Empty;
	TreeNode<ProductCategory> singleCategoryNode = Model.CurrentCategoryNodeOrNull;
	bool level1IsLink = false;
	if (singleCategoryNode != null)
	{
		categoryNodes = new List<TreeNode<ProductCategory>>();
		categoryNodes.Add(singleCategoryNode);
		catalogTopLinkText = "Top";
		level1IsLink = false;
	}
	else
	{
		categoryNodes = Model.CategoryTree;
		level1IsLink = true;
	}

	<div class="row">
		<div class="col-xs-12 text-left-lg col-lg-offset-4 col-lg-8 text-center">
			<h1>@Model.StoreFrontConfig.Name Product Catalog</h1>
		</div>
	</div>

	foreach (TreeNode<ProductCategory> categoryNode in categoryNodes)
	{
		bool isRoot = (Model.CurrentCategoryOrNull == null);
		string rootClass = "";
		if (isRoot)
		{
			rootClass = "CategoryRoot ";
		}
		<div class="row">
			<div class="@(rootClass)CategoryPath col-xs-12 text-center">
				@if (isRoot)
				{
					@:<h2>
				}
				@Html.ProductCategoryWithParentLinks(categoryNode.Entity, catalogTopLinkText, level1IsLink)
				@if (isRoot)
				{
					@:</h2>
				}
			</div>
		</div>

		string offsets = "";
		if (categoryNode.HasChildNodes())
		{
			@:<div class="row CategoryListContainerRow">
			int childNodeCount = categoryNode.ChildNodes.Count();
			if ((childNodeCount * Model.StoreFrontConfig.CatalogCategoryColSm) < 12)
			{
				int colsSm = childNodeCount * Model.StoreFrontConfig.CatalogCategoryColSm;
				int smOffset = (12 - colsSm) / 2;
				offsets = " col-sm-offset-" + smOffset;
			}
			if ((childNodeCount * Model.StoreFrontConfig.CatalogCategoryColMd) < 12)
			{
				int colsMd = childNodeCount * Model.StoreFrontConfig.CatalogCategoryColMd;
				int mdOffset = (12 - colsMd) / 2;
				offsets = " col-md-offset-" + mdOffset;
			}
			if ((childNodeCount * Model.StoreFrontConfig.CatalogCategoryColLg) < 12)
			{
				int colsLg = childNodeCount * Model.StoreFrontConfig.CatalogCategoryColLg;
				int lgOffset = (12 - colsLg) / 2;
				offsets = " col-lg-offset-" + lgOffset;
			}
				}
				foreach (TreeNode<ProductCategory> childCategory in categoryNode.ChildNodes)
				{
					@:<div class="CategoryListItem col-sm-@(Model.StoreFrontConfig.CatalogCategoryColSm) col-md-@(Model.StoreFrontConfig.CatalogCategoryColMd) col-lg-@(Model.StoreFrontConfig.CatalogCategoryColLg)@(offsets)">
						@:<div class="CategoryListItemBox boxshadowjs">
							string url = Url.Action("ViewCategoryByName", "Catalog", new { urlName = childCategory.Entity.UrlName });
							string imageUrl = childCategory.Entity.ImageUrl(Request.ApplicationPath);

							@:<a class="CategoryListImageLink" href="@(url)"><img class="CategoryListImage" src="@(imageUrl)" title="@(Html.AttributeEncode(childCategory.Entity.Name))" /></a>
							@:<br />
							@:<a class="CategoryListTextLink" href="@(url)">@(Html.Encode(childCategory.Entity.Name))</a>
						@:</div>
					@:</div>
					offsets = "";
				}

				if (categoryNode.HasChildNodes())
				{
					@:</div>
				}
	}
}
<style>
	.CategoryRoot.CategoryPath {
	}

	.CategoryPath {
	}

	.CategoryListItemBox {
		padding-top: 0.5em;
	}

	.ProductListItem {
	}

	.ProductListItemBox {
		padding-top: 0.5em;
	}
</style>
