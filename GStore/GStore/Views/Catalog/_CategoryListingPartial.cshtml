@model GStore.Models.ViewModels.CatalogViewModel
@{
	List<TreeNode<ProductCategory>> categoryNodes = null;
	string catalogTopLinkText = string.Empty;
	TreeNode<ProductCategory> singleCategoryNode = Model.CurrentCategoryNodeOrNull;
	bool level1IsLink = false;
	if (singleCategoryNode != null)
	{
		categoryNodes = new List<TreeNode<ProductCategory>>();
		categoryNodes.Add(singleCategoryNode);
		catalogTopLinkText = "Top";
		level1IsLink = false;
	}
	else
	{
		categoryNodes = Model.CategoryTree;
		level1IsLink = true;
	}

	<div class="row">
		<div class="col-xs-12 text-left-lg col-lg-offset-4 col-lg-8 text-center">
			<h1>@Model.StoreFrontConfig.Name Product Catalog</h1>
		</div>
	</div>

	foreach (TreeNode<ProductCategory> categoryNode in categoryNodes)
	{
		<div class="row">
			<div class="col-xs-12 text-left-lg col-lg-offset-4 col-lg-8 text-center">
				@Html.ProductCategoryWithParentLinks(categoryNode.Entity, catalogTopLinkText, level1IsLink)
			</div>
		</div>

		if (categoryNode.HasChildNodes())
		{
			@:<div class="row CategoryListContainer">
		}
		foreach (TreeNode<ProductCategory> childCategory in categoryNode.ChildNodes)
		{
			@:<div class="CategoryListItem col-sm-@(Model.StoreFrontConfig.CatalogCategoryColSm) col-md-@(Model.StoreFrontConfig.CatalogCategoryColMd) col-lg-@(Model.StoreFrontConfig.CatalogCategoryColLg)">
			string url = Url.Action("ViewCategoryByName", "Catalog", new { urlName = childCategory.Entity.UrlName });
			string imageUrl = childCategory.Entity.ImageUrl(Request.ApplicationPath);

			@:<a class="CategoryListImageLink" href="@(url)"><img class="CategoryListImage" src="@(imageUrl)" title="@(Html.AttributeEncode(childCategory.Entity.Name))" /></a>
			@:<br />
			@:<a class="CategoryListTextLink" href="@(url)">@(Html.Encode(childCategory.Entity.Name))</a>
			@:</div>
		}
		if (categoryNode.HasChildNodes())
		{
			@:</div>
		}
	}
}
