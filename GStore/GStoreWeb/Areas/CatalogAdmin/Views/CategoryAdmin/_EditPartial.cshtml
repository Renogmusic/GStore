@model CategoryEditAdminViewModel
@{
	if (Model.StoreFront == null)
	{
		throw new ApplicationException("StoreFront is null.  Be sure to Call FillListsIfEmpty on view model.");
	}

	string tabBasicActive = string.Empty;
	string tabDisplayActive = string.Empty;
	string tabMenusActive = string.Empty;
	string tabMetaTagsActive = string.Empty;
	string tabProductTemplateActive = string.Empty;
	string tabCrossSellProductsActive = string.Empty;
	string tabCrossSellBundlesActive = string.Empty;
	string tabActivationActive = string.Empty;

	switch ((Model.ActiveTab ?? string.Empty).ToLower())
	{
		case "":
		case "basic":
			tabBasicActive = "active";
			break;
		case "display":
			tabDisplayActive = "active";
			break;
		case "menus":
			tabMenusActive = "active";
			break;
		case "metatags":
			tabMetaTagsActive = "active";
			break;
		case "producttemplate":
			tabProductTemplateActive = "active";
			break;
		case "crosssellproducts":
			tabCrossSellProductsActive = "active";
			break;
		case "crosssellbundles":
			tabCrossSellBundlesActive = "active";
			break;
		case "activation":
			tabActivationActive = "active";
			break;
		default:
			goto case "";
	}

	StoreFrontConfiguration storeFrontConfig = Html.CurrentStoreFrontConfig(true);
	Theme catalogTheme = storeFrontConfig.CatalogTheme;
	string catalogThemeName = "Store Catalog Theme: '" + catalogTheme.Name + "' [" + catalogTheme.ThemeId + "]";

	List<ProductCategoryAltProduct> categoryAltProducts = null;
	List<ProductCategoryAltProductBundle> categoryAltBundles = null;
	int crossSellProductActiveCount = 0;
	int crossSellProductTotalCount = 0;
	int crossSellBundleActiveCount = 0;
	int crossSellBundleTotalCount = 0;
	List<SelectListItem> crossSellProductsNotLinkedList = null;
	List<SelectListItem> crossSellBundlesNotLinkedList = null;
	if (!Model.IsCreatePage)
	{
		categoryAltProducts = Model.ProductCategory.CategoryAltProducts.AsQueryable().ApplyDefaultSort().ToList();
		categoryAltBundles = Model.ProductCategory.CategoryAltProductBundles.AsQueryable().ApplyDefaultSort().ToList();
		crossSellProductActiveCount = categoryAltProducts.AsQueryable().WhereIsActive().Count();
		crossSellProductTotalCount = categoryAltProducts.Count();
		crossSellBundleActiveCount = categoryAltBundles.AsQueryable().WhereIsActive().Count();
		crossSellBundleTotalCount = categoryAltBundles.Count();

		List<Product> addProductsNotLinked = Model.StoreFront.Products.Where(p => p.ProductCategoryId != Model.ProductCategoryId
			&& !p.CategoryAltProducts.Any(alt => alt.ProductCategoryId == Model.ProductCategoryId)).AsQueryable().ApplyDefaultSort().ToList();

		crossSellProductsNotLinkedList = addProductsNotLinked.Select(p => new SelectListItem() { Value = p.ProductId.ToString(), Text = p.Category.Name + " [" + p.ProductCategoryId + "] -> " + p.Name + " [" + p.ProductId + "]" }).ToList();

		List<ProductBundle> addBundlesNotLinked = Model.StoreFront.ProductBundles.Where(b => b.ProductCategoryId != Model.ProductCategoryId
			&& !b.CategoryAltBundles.Any(alt => alt.ProductCategoryId == Model.ProductCategoryId)).AsQueryable().ApplyDefaultSort().ToList();

		crossSellBundlesNotLinkedList = addBundlesNotLinked.Select(p => new SelectListItem() { Value = p.ProductBundleId.ToString(), Text = p.Category.Name + " [" + p.ProductCategoryId + "] -> " + p.Name + " [" + p.ProductBundleId + "]" }).ToList();

	}
}
<script>
	function GetActiveTab()
	{
		if (document.getElementById('ActiveTab'))
		{
			return document.getElementById('ActiveTab').value
		}
		return "";
	}
	function SetActiveTab(tabName)
	{
		if (document.getElementById('ActiveTab'))
		{
			document.getElementById('ActiveTab').value = tabName;

			var detailsUrl = @((Url.Action("Details", new { id = Model.ProductCategoryId, Tab = "XXXX"}).ToJavaScriptMvcString(true))).replace('XXXX', tabName);
			var editUrl = @((Url.Action("Edit", new { id = Model.ProductCategoryId, Tab="XXXX"}).ToJavaScriptMvcString(true))).replace('XXXX', tabName);
			var deleteUrl = @((Url.Action("Delete", new { id = Model.ProductCategoryId, Tab = "XXXX"}).ToJavaScriptMvcString(true))).replace('XXXX', tabName);

			if (document.getElementById('DetailsTop'))
			{
				document.getElementById('DetailsTop').href = detailsUrl;
			}
			if (document.getElementById('DetailsBottom'))
			{
				document.getElementById('DetailsBottom').href = detailsUrl;
			}
			if (document.getElementById('EditTop'))
			{
				document.getElementById('EditTop').href = editUrl;
			}
			if (document.getElementById('EditBottom'))
			{
				document.getElementById('EditBottom').href = editUrl;
			}
			if (document.getElementById('DeleteTop'))
			{
				document.getElementById('DeleteTop').href = deleteUrl;
			}
			if (document.getElementById('DeleteBottom'))
			{
				document.getElementById('DeleteBottom').href = deleteUrl;
			}
		}
	}
	function MakeItActive()
	{
		if (document.getElementById('IsPending'))
		{
			document.getElementById('IsPending').checked = false;
		}
		if (document.getElementById('StartDateTimeUtc'))
		{
			document.getElementById('StartDateTimeUtc').value = '@(Html.Raw(DateTime.UtcNow.AddMinutes(-1).ToString().ToJavaScriptString()))';
		}
		if (document.getElementById('EndDateTimeUtc'))
		{
			document.getElementById('EndDateTimeUtc').value = '@(Html.Raw(DateTime.UtcNow.AddYears(100).ToString().ToJavaScriptString()))';
		}
	}

	function RemoveAltProduct(productId)
	{
		$('#RemoveAltProductId').val(productId);
	}
	function RemoveAltBundle(bundleId)
	{
		$('#RemoveAltBundleId').val(bundleId);
	}

</script>
@Html.HiddenFor(model => model.ActiveTab, new { id = "ActiveTab" })
@Html.ValidationSummary(false, "", new { @class = "text-danger" })
@Html.HiddenFor(model => model.ProductCategoryId)
<input id="RemoveAltProductId" type="hidden" name="RemoveAltProductId" />
<input id="RemoveAltBundleId" type="hidden" name="RemoveAltBundleId" />

<div class="form-horizontal">
	<ul class="nav nav-tabs row col-md-offset-3 col-md-9" style="width:100%">
		<li class="@(tabBasicActive)"><a data-toggle="tab" href="#sectionBasic" onclick="SetActiveTab('Basic');">Basic</a></li>
		<li class="@(tabDisplayActive)"><a data-toggle="tab" href="#sectionDisplay" onclick="SetActiveTab('Display');">Display</a></li>
		<li class="@(tabMenusActive)"><a data-toggle="tab" href="#sectionMenus" onclick="SetActiveTab('Menus');">Menus</a></li>
		<li class="@(tabMetaTagsActive)"><a data-toggle="tab" href="#sectionMetaTags" onclick="SetActiveTab('MetaTags');">Meta Tags</a></li>
		<li class="@(tabProductTemplateActive)"><a data-toggle="tab" href="#sectionProductTemplate" onclick="SetActiveTab('ProductTemplate');">Product Template</a></li>
		@if (!Model.IsCreatePage)
		{
			<li class="@(tabCrossSellProductsActive)"><a data-toggle="tab" href="#sectionCrossSellProducts" onclick="SetActiveTab('CrossSellProducts');">Cross-Sell @(Model.ProductCategory.ProductTypePluralOrSystemDefault(storeFrontConfig)) @(crossSellProductActiveCount.ToString("N0")) / @(crossSellProductTotalCount.ToString("N0"))</a></li>
			<li class="@(tabCrossSellBundlesActive)"><a data-toggle="tab" href="#sectionCrossSellBundles" onclick="SetActiveTab('CrossSellBundles');">Cross-Sell @(Model.ProductCategory.BundleTypePluralOrSystemDefault(storeFrontConfig)) @(crossSellBundleActiveCount.ToString("N0")) / @(crossSellBundleTotalCount.ToString("N0"))</a></li>
		}
		<li class="@(tabActivationActive)"><a data-toggle="tab" href="#sectionActivation" onclick="SetActiveTab('Activation');">Activation</a></li>
	</ul>

	<div class="tab-content">
		<div id="sectionBasic" class="tab-pane fade in @(tabBasicActive)">
			<div class="row">
				<h3 class="col-md-offset-3 col-md-7 bg-warning title-align">Basic Info</h3>
			</div>
			@Html.EditorFor(model => model.Name, "FieldText")
			@Html.EditorFor(model => model.UrlName, "FieldUrlName")
			@Html.EditorFor(model => model.Order, "FieldInt")
			@Html.EditorFor(model => model.ParentCategoryId, "FieldProductCategoryIdNullable")
			@Html.EditorFor(model => model.ImageName, "FieldProductCategoryFile", new { filterForImages = true })

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">
					Image Preview
				</label>
				<div class="col-md-7 title-align">
					@Html.DisplayFor(model => model.ImageName, "ProductCategoryFileInfo")
				</div>
			</div>

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">
					Default @(Html.DisplayNameFor(model => model.ProductTypeSingle))
				</label>
				<div class="col-md-7 title-align">
					@Model.ProductCategory.ParentCategory.ProductTypeSingleOrSystemDefault(storeFrontConfig, true)
				</div>
			</div>
			@Html.EditorFor(model => model.ProductTypeSingle, "FieldText")

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">
					Default @(Html.DisplayNameFor(model => model.ProductTypePlural))
				</label>
				<div class="col-md-7 title-align">
					@Model.ProductCategory.ParentCategory.ProductTypePluralOrSystemDefault(storeFrontConfig, true)
				</div>
			</div>
			@Html.EditorFor(model => model.ProductTypePlural, "FieldText")

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">
					Default @(Html.DisplayNameFor(model => model.BundleTypeSingle))
				</label>
				<div class="col-md-7 title-align">
					@Model.ProductCategory.ParentCategory.BundleTypeSingleOrSystemDefault(storeFrontConfig, true)
				</div>
			</div>
			@Html.EditorFor(model => model.BundleTypeSingle, "FieldText")

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">
					Default @(Html.DisplayNameFor(model => model.BundleTypePlural))
				</label>
				<div class="col-md-7 title-align">
					@Model.ProductCategory.ParentCategory.BundleTypePluralOrSystemDefault(storeFrontConfig, true)
				</div>
			</div>
			@Html.EditorFor(model => model.BundleTypePlural, "FieldText")

		</div>

		<div id="sectionDisplay" class="tab-pane fade in @(tabDisplayActive)">
			<div class="row">
				<h3 class="col-md-offset-3 col-md-7 bg-warning title-align">Display</h3>
			</div>

			@Html.EditorFor(model => model.ForRegisteredOnly, "FieldCheckbox")
			@Html.EditorFor(model => model.ForAnonymousOnly, "FieldCheckbox")

			@Html.EditorFor(model => model.DisplayForDirectLinks, "FieldCheckbox")
			@Html.EditorFor(model => model.ThemeId, "FieldThemeIdNullable", new { optionLabel = "(Default - " + catalogThemeName + ")" })

		</div>

		<div id="sectionMenus" class="tab-pane fade in @(tabMenusActive)">
			<div class="row">
				<h3 class="col-md-offset-3 col-md-7 bg-warning title-align">Menus</h3>
			</div>
			@Html.EditorFor(model => model.ShowInMenu, "FieldCheckbox")
			@Html.EditorFor(model => model.ShowInCatalogIfEmpty, "FieldCheckbox")
			@Html.EditorFor(model => model.AllowChildCategoriesInMenu, "FieldCheckbox")
			@Html.EditorFor(model => model.ShowTop10ChildProductsInMenu, "FieldCheckbox")
			@Html.EditorFor(model => model.UseDividerAfterOnMenu, "FieldCheckbox")
			@Html.EditorFor(model => model.UseDividerBeforeOnMenu, "FieldCheckbox")
			@Html.EditorFor(model => model.HideInMenuIfEmpty, "FieldCheckbox")
		</div>

		<div id="sectionMetaTags" class="tab-pane fade in @(tabMetaTagsActive)">
			<div class="row">
				<h3 class="col-md-offset-3 col-md-7 bg-warning title-align">Meta Tags</h3>
			</div>
			@Html.EditorFor(model => model.MetaDescription, "FieldTextArea")
			@Html.EditorFor(model => model.MetaKeywords, "FieldTextArea")
		</div>

		<div id="sectionProductTemplate" class="tab-pane fade in @(tabProductTemplateActive)">
			<div class="row">
				<h3 class="col-md-offset-3 col-md-7 bg-warning title-align">Product Template</h3>
			</div>
			@Html.EditorFor(model => model.CategoryDetailTemplate, "FieldEnum")
			@Html.EditorFor(model => model.ProductListTemplate, "FieldEnum")
			@Html.EditorFor(model => model.BundleListTemplate, "FieldEnum")
			@Html.EditorFor(model => model.ProductDetailTemplate, "FieldEnum")

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">
					@(Model.ParentCategory == null ? "System" : "Category") Default @(Html.DisplayNameFor(model => model.NoProductsMessageHtml))
				</label>
				<div class="col-md-7">
					@(Model.ParentCategory.NoProductsMessageHtmlOrSystemDefault(storeFrontConfig, true))
				</div>
			</div>

			@Html.EditorFor(model => model.NoProductsMessageHtml, "FieldHtml")

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">
					@(Model.ParentCategory == null ? "System" : "Category") Default @(Html.DisplayNameFor(model => model.DefaultSummaryCaption))
				</label>
				<div class="col-md-7">
					@(Model.ParentCategory.DefaultSummaryCaptionOrSystemDefault(storeFrontConfig, "[product name]", true))
				</div>
			</div>
			@Html.EditorFor(model => model.DefaultSummaryCaption, "FieldText")

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">
					@(Model.ParentCategory == null ? "System" : "Category") Default @(Html.DisplayNameFor(model => model.DefaultTopDescriptionCaption))
				</label>
				<div class="col-md-7">
					@(Model.ParentCategory.DefaultTopDescriptionCaptionOrSystemDefault(storeFrontConfig, "[product name]", true))
				</div>
			</div>
			@Html.EditorFor(model => model.DefaultTopDescriptionCaption, "FieldText")

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">
					@(Model.ParentCategory == null ? "System" : "Category") Default @(Html.DisplayNameFor(model => model.DefaultBottomDescriptionCaption))
				</label>
				<div class="col-md-7">
					@(Model.ParentCategory.DefaultBottomDescriptionCaptionOrSystemDefault(storeFrontConfig, "[product name]", true))
				</div>
			</div>
			@Html.EditorFor(model => model.DefaultBottomDescriptionCaption, "FieldText")

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">
					@(Model.ParentCategory == null ? "System" : "Category") Default @(Html.DisplayNameFor(model => model.DefaultSampleImageCaption))
				</label>
				<div class="col-md-7">
					@(Model.ParentCategory.DefaultSampleImageCaptionOrSystemDefault(storeFrontConfig, "[product name]", true))
				</div>
			</div>
			@Html.EditorFor(model => model.DefaultSampleImageCaption, "FieldText")

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">
					@(Model.ParentCategory == null ? "System" : "Category") Default @(Html.DisplayNameFor(model => model.DefaultSampleAudioCaption))
				</label>
				<div class="col-md-7">
					@(Model.ParentCategory.DefaultSampleAudioCaptionOrSystemDefault(storeFrontConfig, "[product name]", true))
				</div>
			</div>
			@Html.EditorFor(model => model.DefaultSampleAudioCaption, "FieldText")

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">
					@(Model.ParentCategory == null ? "System" : "Category") Default @(Html.DisplayNameFor(model => model.DefaultSampleDownloadCaption))
				</label>
				<div class="col-md-7">
					@(Model.ParentCategory.DefaultSampleDownloadCaptionOrSystemDefault(storeFrontConfig, "[product name]", true))
				</div>
			</div>
			@Html.EditorFor(model => model.DefaultSampleDownloadCaption, "FieldText")

			@Html.EditorFor(model => model.ChildCategoryHeaderHtml, "FieldHtml")
			@Html.EditorFor(model => model.ChildCategoryFooterHtml, "FieldHtml")
			@Html.EditorFor(model => model.ProductHeaderHtml, "FieldHtml")
			@Html.EditorFor(model => model.ProductFooterHtml, "FieldHtml")

		</div>

		@if (!Model.IsCreatePage)
		{
			<div id="sectionCrossSellProducts" class="tab-pane fade in @(tabCrossSellProductsActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 bg-warning title-align">Cross-Sell @(Model.ProductCategory.ProductTypePluralOrSystemDefault(storeFrontConfig))</h3>
				</div>

				@foreach (ProductCategoryAltProduct altProduct in Model.ProductCategory.CategoryAltProducts.AsQueryable().ApplyDefaultSort())
				{
					<div class="row">
						<div class="col-md-offset-3 col-md-7 title-align">
							<input type="button" name="Remove" value="Remove" id="Remove" class="btn btn-xs btn-danger" style="margin-bottom: 1em; margin-top: 1em;" onclick="RemoveAltProduct(@(altProduct.ProductId));this.form.submit();" />
							@Html.DisplayNameFor(model => altProduct.Product.Name): @(altProduct.Product.Name) [@(altProduct.ProductId)]
							- @Html.DisplayNameFor(model => altProduct.Product.Order): @(altProduct.Product.Order)
							- @Html.ActionLink("View " + Model.ProductCategory.ProductTypeSingleOrSystemDefault(storeFrontConfig) + " (new window)", "Details", "ProductAdmin", new { id = altProduct.ProductId }, new { @class = "btn btn-xs btn-info", target = "_blank" })
						</div>

					</div>
				}
				<div class="row">
					Add: @Html.DropDownList("AddCrossSellProductId", crossSellProductsNotLinkedList, "[Select a " + Model.ProductCategory.ProductTypeSingleOrSystemDefault(storeFrontConfig) + " to add]", new { @class = "form-control", onchange = "this.form.submit();" })
				</div>
				<hr />
			</div>

			<div id="sectionCrossSellBundles" class="tab-pane fade in @(tabCrossSellBundlesActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 bg-warning title-align">Cross-Sell @(Model.ProductCategory.BundleTypePluralOrSystemDefault(storeFrontConfig))</h3>
				</div>

				@foreach (ProductCategoryAltProductBundle altBundle in Model.ProductCategory.CategoryAltProductBundles.AsQueryable().ApplyDefaultSort())
				{
					<div class="row">
						<div class="col-md-offset-3 col-md-7 title-align">

							<input type="button" name="Remove" value="Remove" id="Remove" class="btn btn-xs btn-danger" style="margin-bottom: 1em; margin-top: 1em;" onclick="RemoveAltBundle(@(altBundle.ProductBundleId));this.form.submit();" />
							@Html.DisplayNameFor(model => altBundle.ProductBundle.Name): @(altBundle.ProductBundle.Name) [@(altBundle.ProductBundleId)]
							- @Html.DisplayNameFor(model => altBundle.ProductBundle.Order): @(altBundle.ProductBundle.Order)
							- @Html.ActionLink("View " + Model.ProductCategory.BundleTypeSingleOrSystemDefault(storeFrontConfig) + " (new window)", "Details", "BundleAdmin", new { id = altBundle.ProductBundleId }, new { @class = "btn btn-xs btn-info", target = "_blank" })
						</div>
					</div>
				}

				<div class="row">
					Add: @Html.DropDownList("AddCrossSellBundleId", crossSellBundlesNotLinkedList, "[Select a " + Model.ProductCategory.BundleTypeSingleOrSystemDefault(storeFrontConfig) + " to add]", new { @class = "form-control", onchange = "this.form.submit();" })
				</div>
				<hr />
			</div>

		}

		<div id="sectionActivation" class="tab-pane fade in @(tabActivationActive)">
			<div class="row">
				<h3 class="col-md-offset-3 col-md-7 bg-warning title-align">Activation</h3>
			</div>
			<h4 class="col-md-offset-3 col-md-6 text-warning">
				Warning: editing these values incorrectly will de-activate your site.<br />
				If you are unsure what to do, click the "Make It Active Now" button to turn the configuration on with default values.<br />
				You can always log in and edit these values even if you de-activate your site.
			</h4>
			<div class="row">
				<p class="col-md-offset-3 col-md-6">Store Local Time: @(DateTime.UtcNow.ToStoreDateTimeString(Html))</p>
				<p class="col-md-offset-3 col-md-6">Current UTC Time: @(DateTime.UtcNow.ToString())</p>
			</div>

			<div class="form-group">
				<label class="control-label col-md-3">Status</label>
				<div class="col-md-9 title-align">
					<strong class="@(Model.IsActiveDirect ? "text-success" : "text-warning")">@(Model.IsActiveDirect ? "ACTIVE" : "INACTIVE")</strong>
					<a class="btn btn-xs btn-success" href="#" onclick="MakeItActive(); return false;">Make It Active Now</a>
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.IsActiveDirect, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			@Html.EditorFor(model => model.IsPending, "FieldCheckbox")
			@Html.EditorFor(model => model.StartDateTimeUtc, "FieldDateTime")
			@Html.EditorFor(model => model.EndDateTimeUtc, "FieldDateTime")
		</div>
	</div>
</div>
