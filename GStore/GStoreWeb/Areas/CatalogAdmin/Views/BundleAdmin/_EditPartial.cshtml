@model ProductBundleEditAdminViewModel
@{
	string tabBasicActive = string.Empty;
	string tabItemsActive = string.Empty;
	string tabDescriptionActive = string.Empty;
	string tabAvailabilityActive = string.Empty;
	string tabDisplayActive = string.Empty;
	string tabResourcesActive = string.Empty;
	string tabMetaTagsActive = string.Empty;
	string tabCrossSellCategoriesActive = string.Empty;
	string tabActivationActive = string.Empty;

	switch ((Model.ActiveTab ?? string.Empty).ToLower())
	{
		case "":
		case "basic":
			tabBasicActive = "active";
			break;
		case "items":
			tabItemsActive = "active";
			break;
		case "description":
			tabDescriptionActive = "active";
			break;
		case "availability":
			tabAvailabilityActive = "active";
			break;
		case "display":
			tabDisplayActive = "active";
			break;
		case "resources":
			tabResourcesActive = "active";
			break;
		case "metatags":
			tabMetaTagsActive = "active";
			break;
		case "crosssellcategories":
			tabCrossSellCategoriesActive = "active";
			break;
		case "activation":
			tabActivationActive = "active";
			break;
		default:
			goto case "";
	}
	
	StoreFrontConfiguration config = Html.CurrentStoreFrontConfig(true);
	bool userCanViewProducts = Model.StoreFront.Authorization_IsAuthorized(Html.CurrentUserProfile(true), GStoreAction.Products_View);
	bool userCanViewCrossSellCategories = config.StoreFront.Authorization_IsAuthorized(Html.CurrentUserProfile(true), GStoreAction.Categories_View);

	List<ProductBundleItem> bundleItems = null;
	List<SelectListItem> addProductList = null;
	decimal? unitPrice = null;
	decimal? listPrice = null;

	List<ProductCategoryAltProductBundle> crossSellCategories = null;
	int crossSellCategoryActiveCount = 0;
	int crossSellCategoryTotalCount = 0;

	if (!Model.IsCreatePage)
	{
		List<Product> addProductsSameCat = Model.ProductBundle.StoreFront.Products.Where(p => p.ProductCategoryId == Model.ProductCategoryId && !p.ProductBundleItems.Any(pbi => pbi.ProductBundleId == Model.ProductBundleId)).AsQueryable().ApplyDefaultSort().ToList();
		SelectListGroup sameCatGroup = new SelectListGroup() { Name = "This Category " + Model.Category.Name + "[" + Model.Category.ProductCategoryId + "]" };
		addProductList = addProductsSameCat.Select(p => new SelectListItem() { Value = p.ProductId.ToString(), Text = p.Name + " [" + p.ProductId + "]", Group = sameCatGroup }).ToList();

		List<Product> addProductsOtherCat = Model.ProductBundle.StoreFront.Products.Where(p => p.ProductCategoryId != Model.ProductCategoryId && !p.ProductBundleItems.Any(pbi => pbi.ProductBundleId == Model.ProductBundleId)).AsQueryable().ApplyDefaultSort().ToList();
		SelectListGroup otherCatGroup = new SelectListGroup() { Name = "Other Categories" };

		addProductList.AddRange(addProductsOtherCat.Select(p => new SelectListItem() { Value = p.ProductId.ToString(), Text = p.Category.Name + " [" + p.ProductCategoryId + "] -> " + p.Name + " [" + p.ProductId + "]", Group = otherCatGroup }));
		
		bundleItems = Model.ProductBundle.ProductBundleItems.AsQueryable().ApplyDefaultSort().ToList();

		unitPrice = Model.ProductBundle.UnitPrice(1);
		listPrice = Model.ProductBundle.ListPrice(1);

		crossSellCategories = Model.ProductBundle.CategoryAltBundles.AsQueryable().ApplyDefaultSort().ToList();
		crossSellCategoryActiveCount = crossSellCategories.AsQueryable().WhereIsActive().Count();
		crossSellCategoryTotalCount = crossSellCategories.Count;
	}



}
<script>
	function GetActiveTab()
	{
		if (document.getElementById('ActiveTab'))
		{
			return document.getElementById('ActiveTab').value
		}
		return "";
	}
	function SetActiveTab(tabName)
	{
		if (document.getElementById('ActiveTab'))
		{
			document.getElementById('ActiveTab').value = tabName;

			var detailsUrl = @((Url.Action("Details", new { id = Model.ProductBundleId, Tab = "XXXX" }).ToJavaScriptMvcString(true))).replace('XXXX', tabName);
			var editUrl = @((Url.Action("Edit", new { id = Model.ProductBundleId, Tab = "XXXX" }).ToJavaScriptMvcString(true))).replace('XXXX', tabName);
			var deleteUrl = @((Url.Action("Delete", new { id = Model.ProductBundleId, Tab = "XXXX" }).ToJavaScriptMvcString(true))).replace('XXXX', tabName);

			if (document.getElementById('DetailsTop'))
			{
				document.getElementById('DetailsTop').href = detailsUrl;
			}
			if (document.getElementById('DetailsBottom'))
			{
				document.getElementById('DetailsBottom').href = detailsUrl;
			}
			if (document.getElementById('EditTop'))
			{
				document.getElementById('EditTop').href = editUrl;
			}
			if (document.getElementById('EditBottom'))
			{
				document.getElementById('EditBottom').href = editUrl;
			}
			if (document.getElementById('DeleteTop'))
			{
				document.getElementById('DeleteTop').href = deleteUrl;
			}
			if (document.getElementById('DeleteBottom'))
			{
				document.getElementById('DeleteBottom').href = deleteUrl;
			}
		}
	}
	function MakeItActive()
	{
		if (document.getElementById('IsPending'))
		{
			document.getElementById('IsPending').checked = false;
		}
		if (document.getElementById('StartDateTimeUtc'))
		{
			document.getElementById('StartDateTimeUtc').value = '@(Html.Raw(DateTime.UtcNow.AddMinutes(-1).ToString().ToJavaScriptString()))';
		}
		if (document.getElementById('EndDateTimeUtc'))
		{
			document.getElementById('EndDateTimeUtc').value = '@(Html.Raw(DateTime.UtcNow.AddYears(100).ToString().ToJavaScriptString()))';
		}
	}

	function ActivateItem(index)
	{
		if (document.getElementById('bundleItems_' + index + '__IsPending'))
		{
			document.getElementById('bundleItems_' + index + '__IsPending').checked = false;
		}
		if (document.getElementById('bundleItems_' + index + '__StartDateTimeUtc'))
		{
			document.getElementById('bundleItems_' + index + '__StartDateTimeUtc').value = '@(Html.Raw(DateTime.UtcNow.AddMinutes(-1).ToString().ToJavaScriptString()))';
		}
		if (document.getElementById('bundleItems_' + index + '__EndDateTimeUtc'))
		{
			document.getElementById('bundleItems_' + index + '__EndDateTimeUtc').value = '@(Html.Raw(DateTime.UtcNow.AddYears(100).ToString().ToJavaScriptString()))';
		}
	}

	function RemoveItem(productId, form)
	{
		$('#RemoveItemId').val(productId);
		$('#EditForm').submit();
	}

	function RemoveAltCategory(categoryId)
	{
		$('#RemoveAltCategoryId').val(categoryId);
		$('#EditForm').submit();
	}
</script>
@Html.HiddenFor(model => model.ActiveTab, new { id = "ActiveTab" })
@Html.HiddenFor(model => model.ProductBundleId)
@Html.Hidden("RemoveItemId", "", new  { id = "RemoveItemId" })
@Html.Hidden("RemoveAltCategoryId", "", new { id = "RemoveAltCategoryId" })
@{
	StoreFrontConfiguration storeFrontConfig = Html.CurrentStoreFront(true).CurrentConfigOrAny();
	string defaultTheme = "";
	if (Model.Category == null || Model.Category.Theme == null)
	{
		Theme catalogTheme = storeFrontConfig.CatalogTheme;
		defaultTheme = "Store Catalog Theme: '" + catalogTheme.Name + "[" + catalogTheme.ThemeId + "]";
	}
	else
	{
		defaultTheme = "Category Theme: '" + Model.Category.Theme.Name + "' [" + Model.Category.ThemeId + "]";
	}
}

@Html.ValidationSummary(false, "", new { @class = "text-danger" })
<div class="form-horizontal">
	<ul class="nav nav-tabs row col-md-offset-3 col-md-9" style="width:100%">
		<li class="@(tabBasicActive)"><a data-toggle="tab" href="#sectionBasic" onclick="SetActiveTab('Basic');">Basic</a></li>
		@if (!Model.IsCreatePage && userCanViewProducts)
		{
			int bundleItemsActive = bundleItems.AsQueryable().WhereIsActive().Count();
			int bundleItemsTotal = bundleItems.Count;
			<li class="@(tabItemsActive)"><a data-toggle="tab" href="#sectionItems" onclick="SetActiveTab('Items');">Items @(bundleItemsActive) / @(bundleItemsTotal)</a></li>
		}
		<li class="@(tabDescriptionActive)"><a data-toggle="tab" href="#sectionDescription" onclick="SetActiveTab('Description');">Description</a></li>
		<li class="@(tabAvailabilityActive)"><a data-toggle="tab" href="#sectionAvailability" onclick="SetActiveTab('Availability');">Availability</a></li>
		<li class="@(tabDisplayActive)"><a data-toggle="tab" href="#sectionDisplay" onclick="SetActiveTab('Display');">Display and Template</a></li>
		<li class="@(tabResourcesActive)"><a data-toggle="tab" href="#sectionResources" onclick="SetActiveTab('Resources');">Resources</a></li>
		<li class="@(tabMetaTagsActive)"><a data-toggle="tab" href="#sectionMetaTags" onclick="SetActiveTab('MetaTags');">Meta Tags</a></li>
		@if (!Model.IsCreatePage && userCanViewCrossSellCategories)
		{
			<li class="@(tabCrossSellCategoriesActive)"><a data-toggle="tab" href="#sectionCrossSellCategories" onclick="SetActiveTab('CrossSellCategories');">Cross-Sell Categories @(crossSellCategoryActiveCount.ToString("N0")) / @(crossSellCategoryTotalCount.ToString("N0"))</a></li>
		}
		<li class="@(tabActivationActive)"><a data-toggle="tab" href="#sectionActivation" onclick="SetActiveTab('Activation');">Activation</a></li>
	</ul>

	<div class="tab-content">
		<div id="sectionBasic" class="tab-pane fade in @(tabBasicActive)">
			<div class="row">
				<h3 class="col-md-offset-3 col-md-7 bg-warning title-align">Basic Info</h3>
			</div>
			@Html.EditorFor(model => model.Name, "FieldText")
			@Html.EditorFor(model => model.UrlName, "FieldUrlName")
			@Html.EditorFor(model => model.Order, "FieldInt")
			@Html.EditorFor(model => model.ProductCategoryId, "FieldProductCategoryId")
		</div>

		@if (!Model.IsCreatePage)
		{
			<div id="sectionItems" class="tab-pane fade in @(tabItemsActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 bg-success title-align">
						Bundle Items: @(bundleItems.Where(bi => bi.IsActiveBubble()).Count().ToString("N0")) Active / @(bundleItems.Where(bi => !bi.IsActiveBubble()).Count().ToString("N0")) Inactive
						&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;Unit Price: @(Html.DisplayFor(model => unitPrice, "CurrencyOrCall"))
						&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;List Price: @(Html.DisplayFor(model => listPrice, "CurrencyOrNA"))
					</h3>
				</div>
				@if (bundleItems.Count == 0)
				{
					<h4 class="row">There are no items in this bundle.</h4>
				}
				else
				{
					ProductBundleItem nullModel = null;
					@:<div class="table-responsive">
						@:<table class="table table-bordered table-responsive table-hover" cellpadding="3" cellspacing="3">
							<tr>
								<th>&nbsp;</th>
								<th class="text-center">
									@(Html.DisplayNameFor(model => nullModel.ProductBundleItemId))
									@Html.HelpLabelPopoverFor(model => nullModel.ProductBundleItemId, placement: PopoverPlacementEnum.top)
									<br/>Status
								</th>
								<th class="text-center">
									@(Html.DisplayNameFor(model => nullModel.Product.Name))
									@Html.HelpLabelPopoverFor(model => nullModel.Product.Name, placement: PopoverPlacementEnum.top)
									[Id]
									@Html.HelpLabelPopoverFor(model => nullModel.ProductId, placement: PopoverPlacementEnum.top)
								</th>
								<th class="text-center">
									@(Html.DisplayNameFor(model => nullModel.Quantity))
									@Html.HelpLabelPopoverFor(model => nullModel.Quantity, placement: PopoverPlacementEnum.top)
								</th>
								<th class="text-center">
									@(Html.DisplayNameFor(model => nullModel.BaseUnitPrice))
									@Html.HelpLabelPopoverFor(model => nullModel.BaseUnitPrice, placement: PopoverPlacementEnum.top)
								</th>
								<th class="text-center">
									@(Html.DisplayNameFor(model => nullModel.BaseListPrice))
									@Html.HelpLabelPopoverFor(model => nullModel.BaseListPrice, placement: PopoverPlacementEnum.top)
								</th>
								<th class="text-center">
									@(Html.DisplayNameFor(model => nullModel.Order))
									@Html.HelpLabelPopoverFor(model => nullModel.Order, placement: PopoverPlacementEnum.top)
								</th>
								<th class="text-center">
									@(Html.DisplayNameFor(model => nullModel.IsPending))
									@Html.HelpLabelPopoverFor(model => nullModel.IsPending, placement: PopoverPlacementEnum.top)
								</th>
								<th class="text-center">
									@(Html.DisplayNameFor(model => nullModel.StartDateTimeUtc))
									@Html.HelpLabelPopoverFor(model => nullModel.StartDateTimeUtc, placement: PopoverPlacementEnum.top)
								</th>
								<th class="text-center">
									@(Html.DisplayNameFor(model => nullModel.EndDateTimeUtc))
									@Html.HelpLabelPopoverFor(model => nullModel.EndDateTimeUtc, placement: PopoverPlacementEnum.top)
								</th>
							</tr>
				}
				@for (int i = 0; i < bundleItems.Count; i++)
				{
					ProductBundleItem item = bundleItems[i];
					string rowClass = string.Empty;
					string statusClass = "text-success";
					string statusText = "Active";
					if (!item.IsActiveBubble())
					{
						rowClass = "bg-warning";
						statusClass = "text-danger";
						statusText = "INACTIVE";
					}

					<tr class="@rowClass">
						<td>
							<a class="btn btn-sm btn-danger" href="javascript: RemoveItem('@(item.ProductId.ToString().ToJavaScriptMvcString())');" title="Remove this item from bundle">Remove</a>
						</td>
						<td class="@(statusClass)">
							@(Html.DisplayFor(model => bundleItems[i].ProductBundleItemId))
							@Html.HiddenFor(model => bundleItems[i].ProductBundleItemId)
							<br />
							@(statusText)
							@if (userCanViewProducts)
							{
								<br />
								@Html.ActionLink("View Product", "Details", "ProductAdmin", new { id = item.ProductId }, new { target = "_blank", @class="small" })
								<br/>
								<small>(new window)</small>
							}
						</td>

						<td>
							@(Html.DisplayFor(model => bundleItems[i].Product.Name)) [@(Html.DisplayFor(model => bundleItems[i].ProductId))] @(bundleItems[i].ProductVariantInfo)
						</td>
						<td align="center">
							@Html.EditorFor(model => bundleItems[i].Quantity, "FieldInt", new { ShowLabel = false, UseHelpLabelText = false, UseHelpLabelPopover = false })
						</td>
						<td align="center">
							@(Html.EditorFor(model => bundleItems[i].BaseUnitPrice, "FieldCurrency", new { ShowLabel = false, UseHelpLabelText = false, UseHelpLabelPopover = false }))
						</td>
						<td align="center">
							@(Html.EditorFor(model => bundleItems[i].BaseListPrice, "FieldCurrency", new { ShowLabel = false, UseHelpLabelText = false, UseHelpLabelPopover = false }))
						</td>
						<td align="center">
							@(Html.EditorFor(model => bundleItems[i].Order, "FieldInt", new { ShowLabel = false, UseHelpLabelText = false, UseHelpLabelPopover = false }))
						</td>
						<td align="center">
							@(Html.EditorFor(model => bundleItems[i].IsPending, "FieldCheckbox", new { ShowLabel = false, UseHelpLabelText = false, UseHelpLabelPopover = false }))
							<a class="btn btn-xs btn-success" href="javascript:ActivateItem('@(i)');">Activate</a>
						</td>
						<td align="center">
							@(Html.EditorFor(model => bundleItems[i].StartDateTimeUtc, "FieldDateTime", new { ShowLabel = false, UseHelpLabelText = false, UseHelpLabelPopover = false }))
						</td>
						<td align="center">
							@(Html.EditorFor(model => bundleItems[i].EndDateTimeUtc, "FieldDateTime", new { ShowLabel = false, UseHelpLabelText = false, UseHelpLabelPopover = false }))
						</td>

					</tr>
				}
				@if (bundleItems.Count != 0)
				{
					@:</table>
					@:</div>
				}

				<div class="row">
					<div class="col-md-offset-3 col-md-7">
						@Html.DropDownList("AddProductId", addProductList, "(Add Product to Bundle)", new { id = "AddProductId", @class = "form-control", onchange = "this.form.submit();" })
					</div>
				</div>
				<br />
			</div>
		}

		<div id="sectionDescription" class="tab-pane fade in @(tabDescriptionActive)">
			<div class="row">
				<h3 class="col-md-offset-3 col-md-7 bg-warning title-align">Description</h3>
			</div>
			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">Category Default Summary Caption</label>
				<div class="col-md-7 title-align">
					@Model.Category.DefaultSummaryCaptionOrSystemDefault(config, Model.Name)
				</div>
			</div>
			@Html.EditorFor(model => model.SummaryCaption, "FieldText")
			@Html.EditorFor(model => model.SummaryHtml, "FieldHtml")

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">Category Default Top Description Caption</label>
				<div class="col-md-7 title-align">
					@Model.Category.DefaultTopDescriptionCaptionOrSystemDefault(config, Model.Name)
				</div>
			</div>

			@Html.EditorFor(model => model.TopDescriptionCaption, "FieldText")
			@Html.EditorFor(model => model.TopDescriptionHtml, "FieldHtml")

			@Html.EditorFor(model => model.TopLinkLabel, "FieldText")
			@Html.EditorFor(model => model.TopLinkHref, "FieldUrl")

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">Category Default Bottom Description Caption</label>
				<div class="col-md-7 title-align">
					@Model.Category.DefaultBottomDescriptionCaptionOrSystemDefault(config, Model.Name)
				</div>
			</div>
			@Html.EditorFor(model => model.BottomDescriptionCaption, "FieldText")
			@Html.EditorFor(model => model.BottomDescriptionHtml, "FieldHtml")

			@Html.EditorFor(model => model.BottomLinkLabel, "FieldText")
			@Html.EditorFor(model => model.BottomLinkHref, "FieldUrl")

			@Html.EditorFor(model => model.FooterHtml, "FieldHtml")

			@Html.EditorFor(model => model.ProductTypeSingle, "FieldText")
			@Html.EditorFor(model => model.ProductTypePlural, "FieldText")
		</div>

		<div id="sectionAvailability" class="tab-pane fade in @(tabAvailabilityActive)">
			<div class="row">
				<h3 class="col-md-offset-3 col-md-7 bg-warning title-align">Availability</h3>
			</div>
			@Html.EditorFor(model => model.ForRegisteredOnly, "FieldCheckbox")
			@Html.EditorFor(model => model.ForAnonymousOnly, "FieldCheckbox")
			@Html.EditorFor(model => model.AvailableForPurchase, "FieldCheckbox")
			@Html.EditorFor(model => model.MaxQuantityPerOrder, "FieldInt")
			@Html.EditorFor(model => model.RequestAQuote_Show, "FieldCheckbox")
			@Html.EditorFor(model => model.RequestAQuote_Label, "FieldText")
			@Html.EditorFor(model => model.RequestAQuote_PageId, "FieldPageIdNullable")
		</div>

		<div id="sectionDisplay" class="tab-pane fade in @(tabDisplayActive)">
			<div class="row">
				<h3 class="col-md-offset-3 col-md-7 bg-warning title-align">Display and Template</h3>
			</div>

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">Category Theme</label>
				<div class="col-md-7 title-align">
					@Html.DisplayFor(model => model.Category.Theme)
				</div>
			</div>
			@Html.EditorFor(model => model.ThemeId, "FieldThemeIdNullable", new { optionLabel = "(Default - " + defaultTheme + ")" })

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">Category @(Html.DisplayNameFor(model => model.ProductBundleDetailTemplate))</label>
				<div class="col-md-7 title-align">
					@Html.DisplayFor(model => model.Category.ProductBundleDetailTemplate)
				</div>
			</div>
			@{
				string optionLabel = "(default - Category specified Template)";
				if (Model.Category != null)
				{
					optionLabel = "(default - Category specified Template - " + Model.Category.ProductBundleDetailTemplate.ToDisplayName() + ")";
				}
			}
			@Html.EditorFor(model => model.ProductBundleDetailTemplate, "FieldEnumWithSelect", new { OptionLabel = optionLabel })


		</div>

		<div id="sectionResources" class="tab-pane fade in @(tabResourcesActive)">
			<div class="row">
				<h3 class="col-md-offset-3 col-md-7 bg-warning title-align">Resources</h3>
			</div>

			@Html.EditorFor(model => model.ImageName, "FieldProductBundleCatalogFile", new { filterForImages = true })
			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">@(Html.DisplayNameFor(model => model.ImageName)) Preview</label>
				<div class="col-md-7 title-align">
					@Html.DisplayFor(model => model.ImageName, "ProductBundleCatalogFileInfo")
				</div>
			</div>
		</div>

		<div id="sectionMetaTags" class="tab-pane fade in @(tabMetaTagsActive)">
			<div class="row">
				<h3 class="col-md-offset-3 col-md-7 bg-warning title-align">Meta Tags</h3>
			</div>

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">Category Default Meta Description</label>
				<div class="col-md-7 title-align">
					@Model.Category.MetaDescriptionOrSystemDefault(storeFrontConfig)
				</div>
			</div>
			@Html.EditorFor(model => model.MetaDescription, "FieldText")

			<div class="form-group">
				<label class="col-md-offset-1 col-md-3 title-align-right">Category Default Meta Keywords</label>
				<div class="col-md-7 title-align">
					@Model.Category.MetaKeywordsOrSystemDefault(storeFrontConfig)
				</div>
			</div>
			@Html.EditorFor(model => model.MetaKeywords, "FieldText")
		</div>

		@if (!Model.IsCreatePage && userCanViewCrossSellCategories)
		{
			<div id="sectionCrossSellCategories" class="tab-pane fade in @(tabCrossSellCategoriesActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 bg-success title-align">Cross-Sell Categories</h3>
				</div>
				@foreach (ProductCategoryAltProductBundle altCategory in crossSellCategories)
				{
					<div class="row">
						<div class="col-md-offset-3 col-md-7 text-left">
							<input type="button" value="Remove" class="btn btn-xs btn-danger" onclick="RemoveAltCategory(@(altCategory.ProductCategoryId));" style="margin-top: 1em; margin-bottom: 1em;"/>
							@Html.DisplayNameFor(model => altCategory.Category):
							@Html.DisplayFor(model => altCategory.Category.Name)  [@(altCategory.ProductCategoryId)]
							 - @Html.ActionLink("View Category (new window)", "Details", "CategoryAdmin", new { id = altCategory.ProductCategoryId }, new { @class="btn btn-xs btn-info", target="_blank" })
						</div>
					</div>
				}
				<hr/>
			</div>
		}
		
		<div id="sectionActivation" class="tab-pane fade in @(tabActivationActive)">
			<div class="row">
				<h3 class="col-md-offset-3 col-md-7 bg-warning title-align">Activation</h3>
			</div>
			<h4 class="col-md-offset-3 col-md-6 text-warning">
				Warning: editing these values incorrectly will de-activate your site.<br />
				If you are unsure what to do, click the "Make It Active Now" button to turn the configuration on with default values.<br />
				You can always log in and edit these values even if you de-activate your site.
			</h4>
			<div class="row">
				<p class="col-md-offset-3 col-md-6">Store Local Time: @(DateTime.UtcNow.ToStoreDateTimeString(Html))</p>
				<p class="col-md-offset-3 col-md-6">Current UTC Time: @(DateTime.UtcNow.ToString())</p>
			</div>

			<div class="form-group">
				<label class="control-label col-md-3">Status</label>
				<div class="col-md-9 title-align">
					<strong class="@(Model.IsActiveDirect ? "text-success" : "text-warning")">@(Model.IsActiveDirect ? "ACTIVE" : "INACTIVE")</strong>
					<a class="btn btn-xs btn-success" href="#" onclick="MakeItActive(); return false;">Make It Active Now</a>
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.IsActiveDirect, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			@Html.EditorFor(model => model.IsPending, "FieldCheckbox")
			@Html.EditorFor(model => model.StartDateTimeUtc, "FieldDateTime")
			@Html.EditorFor(model => model.EndDateTimeUtc, "FieldDateTime")
		</div>

	</div>
</div>
