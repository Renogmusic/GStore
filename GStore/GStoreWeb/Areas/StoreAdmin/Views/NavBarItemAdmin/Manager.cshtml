@model NavBarItemManagerAdminViewModel
@{

	UserProfile profile = Html.CurrentUserProfile(true);
	bool userCanCreate = Model.StoreFront.Authorization_IsAuthorized(profile, GStoreAction.Pages_Create);
	bool userCanEdit = Model.StoreFront.Authorization_IsAuthorized(profile, GStoreAction.Pages_Edit);
	bool userCanDelete = Model.StoreFront.Authorization_IsAuthorized(profile, GStoreAction.Pages_Delete);

}

<div class="row">
	<h2 class="jumbotron col-md-offset-3 col-md-6 StoreAdminIndexPageTitle">
		Menu Manager
		<br /><small>@(Html.DisplayNameFor(model => model.StoreFront)) @Html.DisplayFor(model => model.StoreFront)</small>
	</h2>
</div>
<script>
	var _selectedNavBarItemId = "";
	function clickitem(navBarItemId) {
		if (_selectedNavBarItemId == "") {
			_selectedNavBarItemId = navBarItemId;
			document.getElementById("NavBarItemId_" + navBarItemId).classList.add("clickselected");
			return;
		}
		else {
			if (_selectedNavBarItemId == navBarItemId) {
				_selectedNavBarItemId = "";
				document.getElementById("NavBarItemId_" + navBarItemId).classList.remove("clickselected");
				return;
			}
		}
		MoveItem(_selectedNavBarItemId, navBarItemId);
	}

	function MoveItem(source, target) {
		if (source == target) {
			return;
		}
		var url = '@(Html.Raw(Url.Action("MoveItem", new { Source = "XXXX", Target = "YYYY" }).ToJavaScriptString()))';
		url = url.replace("XXXX", source);
		url = url.replace("YYYY", target);
		window.location.href = url;
	}

	function dragstart(ev, navBarItemId) {
		ev.dataTransfer.setData("text", navBarItemId);
	}

	function dragover(ev, navBarItemId) {
		ev.preventDefault();
	}

	function drop(ev, navBarItemId) {
		var navBarItemSource = ev.dataTransfer.getData("text");
		MoveItem(navBarItemSource, navBarItemId);
	}
</script>
<style>
	.clickselected {
		background-color: rgba(255, 255, 0, .5)
	}

	.borderLevel1 {
		border: 1px solid;
		width: 95%;
	}

	.borderLevel2 {
		border: 1px solid;
	}

	.borderLevel3 {
		border: 1px solid;
	}

	.borderLevel4 {
		border: 1px solid;
	}

	.borderLevel5 {
		border: 1px solid;
	}

	.borderLevel6 {
		border: 1px solid;
	}

	.borderLevel7 {
		border: 1px solid;
	}

	.borderLevel8 {
		border: 1px solid;
	}

	.borderLevel9 {
		border: 1px solid;
	}

	.borderLevel10 {
		border: 1px solid;
	}

	.well {
		padding-top: 3px;
		padding-bottom: 3px;
	}
</style>
@{
	if (userCanCreate)
	{
		<div class="row">
			<div class="col-xs-12">
				@Html.ActionLink("Create a New Menu Item", "Create", null, new { @class = "btn btn-sm btn-info" })
			</div>
		</div>
	}
}

@{
	if (Model.NavBarItemEditViewModels.Count() == 0)
	{
		<div class="row">
			<div class="col-xs-12">
				<h2 class="text-warning">No Menu Items found for this store front.</h2>
			</div>
		</div>
	}
	else
	{
		<div class="row well title-align borderRoot">
			<h3 onclick="clickitem(0);" ondragenter="event.preventDefault();" ondragover="dragover(event, '0');" ondrop="drop(event, '0');">Top of Menu <small>(drag items here to make them Top level items)</small></h3>
			<div class="col-xs-1">Top</div>
			<div class="col-xs-1">Level 2</div>
			<div class="col-xs-1">Level 3</div>
			<div class="col-xs-1">Level 4</div>
			<div class="col-xs-1">Level 5</div>
			<div class="col-xs-1">Level 6</div>
			<div class="col-xs-1">Level 7</div>
			<div class="col-xs-1">Level 8</div>
			<div class="col-xs-1">Level 9</div>
			<div class="col-xs-1">Level 10</div>
		</div>

		var treeRoot = Model.NavBarItemTree();
		foreach (var level1Item in treeRoot)
		{
			int level1IdInt = level1Item.Entity.NavBarItemId;
			string level1Id = "'" + level1Item.Entity.NavBarItemId + "'";
			<div id="NavBarItemId_@(level1Item.Entity.NavBarItemId)" class="row well text-left borderLevel1" onclick="clickitem(@(level1Id));" draggable="true" ondragover="dragover(event, @(level1Id));" ondragstart="dragstart(event, @(level1Id));" ondrop="drop(event, @(level1Id));">
				@Html.DisplayFor(model => level1Item, "NavBarItemTreeNode")
				&nbsp;-&nbsp;
				<a href="@(Url.Action("MoveUp", new { id = level1IdInt} ))"><small>Move Up</small></a>
				&nbsp;-&nbsp;
				<a href="@(Url.Action("MoveDown", new { id = level1IdInt} ))"><small>Move Down</small></a>
				&nbsp;-&nbsp;
				<a class="btn btn-xs btn-warning" href="@(Url.Action("AdvancedEdit", new { id = level1IdInt, returnToManager = true} ))">Edit</a>
				&nbsp;-&nbsp;
				<a class="btn btn-xs btn-danger" href="@(Url.Action("AdvancedDelete", new { id = level1IdInt, returnToManager = true} ))">Delete</a>
				&nbsp;-&nbsp;
				<a class="btn btn-xs btn-success" href="@(Url.Action("Create", new { id = level1IdInt, returnToManager = true} ))">Create Child</a>
			</div>
			foreach (var level2Item in level1Item.ChildNodes)
			{
				int level2IdInt = level2Item.Entity.NavBarItemId;
				string level2Id = "'" + level2Item.Entity.NavBarItemId + "'";
				<div class="row">
					<div class="col-xs-1"></div>
					<div id="NavBarItemId_@(level2Item.Entity.NavBarItemId)" class="well col-xs-10 text-left borderLevel2" onclick="clickitem(@(level2Id));" draggable="true" ondragover="dragover(event, @(level2Id));" ondragstart="dragstart(event, @(level2Id));" ondrop="drop(event, @(level2Id));">
						@Html.DisplayFor(model => level2Item, "NavBarItemTreeNode")
						&nbsp;-&nbsp;
						<a href="@(Url.Action("MoveUp", new { id = level2IdInt} ))"><small>Move Up</small></a>
						&nbsp;-&nbsp;
						<a href="@(Url.Action("MoveDown", new { id = level2IdInt} ))"><small>Move Down</small></a>
						&nbsp;-&nbsp;
						<a class="btn btn-xs btn-warning" href="@(Url.Action("AdvancedEdit", new { id = level2IdInt, returnToManager = true} ))">Edit</a>
						&nbsp;-&nbsp;
						<a class="btn btn-xs btn-danger" href="@(Url.Action("AdvancedDelete", new { id = level2IdInt, returnToManager = true} ))">Delete</a>
						&nbsp;-&nbsp;
						<a class="btn btn-xs btn-success" href="@(Url.Action("Create", new { id = level2IdInt, returnToManager = true} ))">Create Child</a>
					</div>
				</div>
				foreach (var level3Item in level2Item.ChildNodes)
				{
					int level3IdInt = level3Item.Entity.NavBarItemId;
					string level3Id = "'" + level3Item.Entity.NavBarItemId + "'";
					<div class="row">
						<div class="col-xs-offset-1 col-xs-1"></div>
						<div id="NavBarItemId_@(level3Item.Entity.NavBarItemId)" class="well text-left col-xs-9 borderLevel3" onclick="clickitem(@(level3Id));" draggable="true" ondragover="dragover(event, @(level3Id));" ondragstart="dragstart(event, @(level3Id));" ondrop="drop(event, @(level3Id));">
							@Html.DisplayFor(model => level3Item, "NavBarItemTreeNode")
							&nbsp;-&nbsp;
							<a href="@(Url.Action("MoveUp", new { id = level3IdInt} ))"><small>Move Up</small></a>
							&nbsp;-&nbsp;
							<a href="@(Url.Action("MoveDown", new { id = level3IdInt} ))"><small>Move Down</small></a>
							&nbsp;-&nbsp;
							<a class="btn btn-xs btn-warning" href="@(Url.Action("AdvancedEdit", new { id = level3IdInt, returnToManager = true} ))">Edit</a>
							&nbsp;-&nbsp;
							<a class="btn btn-xs btn-danger" href="@(Url.Action("AdvancedDelete", new { id = level3IdInt, returnToManager = true} ))">Delete</a>
							&nbsp;-&nbsp;
							<a class="btn btn-xs btn-success" href="@(Url.Action("Create", new { id = level3IdInt, returnToManager = true} ))">Create Child</a>
						</div>
					</div>
					foreach (var level4Item in level3Item.ChildNodes)
					{
						int level4IdInt = level4Item.Entity.NavBarItemId;
						string level4Id = "'" + level4Item.Entity.NavBarItemId + "'";
						<div class="row">
							<div class="col-xs-offset-2 col-xs-1"></div>
							<div id="NavBarItemId_@(level4Item.Entity.NavBarItemId)" class="well text-left col-xs-8 borderLevel4" onclick="clickitem(@(level4Id));" draggable="true" ondragover="dragover(event, @(level4Id));" ondragstart="dragstart(event, @(level4Id));" ondrop="drop(event, @(level4Id));">
								@Html.DisplayFor(model => level4Item, "NavBarItemTreeNode")
								&nbsp;-&nbsp;
								<a href="@(Url.Action("MoveUp", new { id = level4IdInt} ))"><small>Move Up</small></a>
								&nbsp;-&nbsp;
								<a href="@(Url.Action("MoveDown", new { id = level4IdInt} ))"><small>Move Down</small></a>
								&nbsp;-&nbsp;
								<a class="btn btn-xs btn-warning" href="@(Url.Action("AdvancedEdit", new { id = level4IdInt, returnToManager = true} ))">Edit</a>
								&nbsp;-&nbsp;
								<a class="btn btn-xs btn-danger" href="@(Url.Action("AdvancedDelete", new { id = level4IdInt, returnToManager = true} ))">Delete</a>
								&nbsp;-&nbsp;
								<a class="btn btn-xs btn-success" href="@(Url.Action("Create", new { id = level4IdInt, returnToManager = true} ))">Create Child</a>
							</div>
						</div>
						foreach (var level5Item in level4Item.ChildNodes)
						{
							int level5IdInt = level5Item.Entity.NavBarItemId;
							string level5Id = "'" + level5Item.Entity.NavBarItemId + "'";
							<div class="row">
								<div class="col-xs-offset-3 col-xs-1"></div>
								<div id="NavBarItemId_@(level5Item.Entity.NavBarItemId)" class="well text-left col-xs-7 borderLevel5" onclick="clickitem(@(level5Id));" draggable="true" ondragstart="dragstart(event, @(level5Id));" ondragover="dragover(event, @(level5Id));" ondrop="drop(event, @(level5Id));">
									@Html.DisplayFor(model => level5Item, "NavBarItemTreeNode")
									&nbsp;-&nbsp;
									<a href="@(Url.Action("MoveUp", new { id = level5IdInt} ))"><small>Move Up</small></a>
									&nbsp;-&nbsp;
									<a href="@(Url.Action("MoveDown", new { id = level5IdInt} ))"><small>Move Down</small></a>
									&nbsp;-&nbsp;
									<a class="btn btn-xs btn-warning" href="@(Url.Action("AdvancedEdit", new { id = level5IdInt, returnToManager = true} ))">Edit</a>
									&nbsp;-&nbsp;
									<a class="btn btn-xs btn-danger" href="@(Url.Action("AdvancedDelete", new { id = level5IdInt, returnToManager = true} ))">Delete</a>
									&nbsp;-&nbsp;
									<a class="btn btn-xs btn-success" href="@(Url.Action("Create", new { id = level5IdInt, returnToManager = true} ))">Create Child</a>
								</div>
							</div>
							foreach (var level6Item in level5Item.ChildNodes)
							{
								int level6IdInt = level6Item.Entity.NavBarItemId;
								string level6Id = "'" + level6Item.Entity.NavBarItemId + "'";
								<div class="row">
									<div class="col-xs-offset-4 col-xs-1"></div>
									<div id="NavBarItemId_@(level6Item.Entity.NavBarItemId)" class="well text-left col-xs-6 borderLevel6" onclick="clickitem(@(level6Id));" draggable="true" ondragstart="dragstart(event, @(level6Id));" ondragover="dragover(event, @(level6Id));" ondrop="drop(event, @(level6Id));">
										@Html.DisplayFor(model => level6Item, "NavBarItemTreeNode")
										&nbsp;-&nbsp;
										<a href="@(Url.Action("MoveUp", new { id = level6IdInt} ))"><small>Move Up</small></a>
										&nbsp;-&nbsp;
										<a href="@(Url.Action("MoveDown", new { id = level6IdInt} ))"><small>Move Down</small></a>
										&nbsp;-&nbsp;
										<a class="btn btn-xs btn-warning" href="@(Url.Action("AdvancedEdit", new { id = level6IdInt, returnToManager = true} ))">Edit</a>
										&nbsp;-&nbsp;
										<a class="btn btn-xs btn-danger" href="@(Url.Action("AdvancedDelete", new { id = level6IdInt, returnToManager = true} ))">Delete</a>
										&nbsp;-&nbsp;
										<a class="btn btn-xs btn-success" href="@(Url.Action("Create", new { id = level6IdInt, returnToManager = true} ))">Create Child</a>
									</div>
								</div>
								foreach (var level7Item in level6Item.ChildNodes)
								{
									int level7IdInt = level7Item.Entity.NavBarItemId;
									string level7Id = "'" + level7Item.Entity.NavBarItemId + "'";
									<div class="row">
										<div class="col-xs-offset-5 col-xs-1"></div>
										<div id="NavBarItemId_@(level7Item.Entity.NavBarItemId)" class="well text-left col-xs-5 borderLevel7" onclick="clickitem(@(level7Id));" draggable="true" ondragstart="dragstart(event, @(level7Id));" ondragover="dragover(event, @(level7Id));" ondrop="drop(event, @(level7Id));">
											@Html.DisplayFor(model => level7Item, "NavBarItemTreeNode")
											&nbsp;-&nbsp;
											<a href="@(Url.Action("MoveUp", new { id = level7IdInt} ))"><small>Move Up</small></a>
											&nbsp;-&nbsp;
											<a href="@(Url.Action("MoveDown", new { id = level7IdInt} ))"><small>Move Down</small></a>
											&nbsp;-&nbsp;
											<a class="btn btn-xs btn-warning" href="@(Url.Action("AdvancedEdit", new { id = level7IdInt, returnToManager = true} ))">Edit</a>
											&nbsp;-&nbsp;
											<a class="btn btn-xs btn-danger" href="@(Url.Action("AdvancedDelete", new { id = level7IdInt, returnToManager = true} ))">Delete</a>
											&nbsp;-&nbsp;
											<a class="btn btn-xs btn-success" href="@(Url.Action("Create", new { id = level7IdInt, returnToManager = true} ))">Create Child</a>
										</div>
									</div>
									foreach (var level8Item in level7Item.ChildNodes)
									{
										int level8IdInt = level8Item.Entity.NavBarItemId;
										string level8Id = "'" + level8Item.Entity.NavBarItemId + "'";
										<div class="row">
											<div class="col-xs-offset-6 col-xs-1"></div>
											<div id="NavBarItemId_@(level8Item.Entity.NavBarItemId)" class="well text-left col-xs-4 borderLevel8" onclick="clickitem(@(level8Id));" draggable="true" ondragstart="dragstart(event, @(level8Id));" ondragover="dragover(event, @(level8Id));" ondrop="drop(event, @(level8Id));">
												@Html.DisplayFor(model => level8Item, "NavBarItemTreeNode")
												&nbsp;-&nbsp;
												<a href="@(Url.Action("MoveUp", new { id = level8IdInt} ))"><small>Move Up</small></a>
												&nbsp;-&nbsp;
												<a href="@(Url.Action("MoveDown", new { id = level8IdInt} ))"><small>Move Down</small></a>
												&nbsp;-&nbsp;
												<a class="btn btn-xs btn-warning" href="@(Url.Action("AdvancedEdit", new { id = level8IdInt, returnToManager = true} ))">Edit</a>
												&nbsp;-&nbsp;
												<a class="btn btn-xs btn-danger" href="@(Url.Action("AdvancedDelete", new { id = level8IdInt, returnToManager = true} ))">Delete</a>
												&nbsp;-&nbsp;
												<a class="btn btn-xs btn-success" href="@(Url.Action("Create", new { id = level8IdInt, returnToManager = true} ))">Create Child</a>
											</div>
										</div>
										foreach (var level9Item in level8Item.ChildNodes)
										{
											int level9IdInt = level9Item.Entity.NavBarItemId;
											string level9Id = "'" + level9Item.Entity.NavBarItemId + "'";
											<div class="row">
												<div class="col-xs-offset-7 col-xs-1"></div>
												<div id="NavBarItemId_@(level9Item.Entity.NavBarItemId)" class="well text-left col-xs-3 borderLevel9" onclick="clickitem(@(level9Id));" draggable="true" ondragstart="dragstart(event, @(level9Id));" ondragover="dragover(event, @(level9Id));" ondrop="drop(event, @(level9Id));">
													@Html.DisplayFor(model => level9Item, "NavBarItemTreeNode")
													&nbsp;-&nbsp;
													<a href="@(Url.Action("MoveUp", new { id = level9IdInt} ))"><small>Move Up</small></a>
													&nbsp;-&nbsp;
													<a href="@(Url.Action("MoveDown", new { id = level9IdInt} ))"><small>Move Down</small></a>
													&nbsp;-&nbsp;
													<a class="btn btn-xs btn-warning" href="@(Url.Action("AdvancedEdit", new { id = level9IdInt, returnToManager = true} ))">Edit</a>
													&nbsp;-&nbsp;
													<a class="btn btn-xs btn-danger" href="@(Url.Action("AdvancedDelete", new { id = level9IdInt, returnToManager = true} ))">Delete</a>
													&nbsp;-&nbsp;
													<a class="btn btn-xs btn-success" href="@(Url.Action("Create", new { id = level9IdInt, returnToManager = true} ))">Create Child</a>
												</div>
											</div>
											foreach (var level10Item in level9Item.ChildNodes)
											{
												int level10IdInt = level10Item.Entity.NavBarItemId;
												string level10Id = "'" + level10Item.Entity.NavBarItemId + "'";
												string textClass = "";
												bool hasHiddenChildren = level10Item.HasChildMenuItems(11);
												if (hasHiddenChildren)
												{
													textClass = "text-danger";
												}
												<div class="row">
													<div class="col-xs-offset-8 col-xs-1"></div>
													<div id="NavBarItemId_@(level10Item.Entity.NavBarItemId)" class="well text-left col-xs-2 borderLevel10 @(textClass)" onclick="clickitem(@(level10Id));" draggable="true" ondragstart="dragstart(event, @(level10Id));">
														@Html.DisplayFor(model => level10Item, "NavBarItemTreeNode")
														&nbsp;-&nbsp;
														<a href="@(Url.Action("MoveUp", new { id = level10IdInt} ))"><small>Move Up</small></a>
														&nbsp;-&nbsp;
														<a href="@(Url.Action("MoveDown", new { id = level10IdInt} ))"><small>Move Down</small></a>
														&nbsp;-&nbsp;
														<a class="btn btn-xs btn-warning" href="@(Url.Action("AdvancedEdit", new { id = level10IdInt, returnToManager = true} ))">Edit</a>
														&nbsp;-&nbsp;
														<a class="btn btn-xs btn-danger" href="@(Url.Action("AdvancedDelete", new { id = level10IdInt, returnToManager = true} ))">Delete</a>
														@if (hasHiddenChildren)
														{
															<br />
															<span class="text-danger">Warning: this item has child items not shown.</span>
														}
													</div>
												</div>
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

<div class="row">
	<div class="xs-12">
		<p>
			<strong>How to use the Menu Manager:</strong><br />
			On a desktop or laptop, you can drag and drop a menu item to move it to a new location. <br />
			On a tablet or mobile device, touch (click) the first item, it will turn yellow, then touch (click) the destination.<br />
			To Move an item to the top menu, drag it (or touch) the "Top Of Menu" section.<br />
			To change the order of items, click the Move Up or Move Down links.<br />
			To Create a new Menu Item, click the blue "Create a New Menu Item" button on the top of the list.<br />
			To Edit advanced settings, click the orange "Edit" button next to the item.<br />
		</p>
	</div>
</div>
