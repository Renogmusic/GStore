@model WebFormEditAdminViewModel

@{
	List<WebFormFieldEditAdminViewModel> fields = Model.WebFormFieldEditAdminViewModels();

	bool isReadOnly = Model.IsReadOnly;
	bool isDeletePage = Model.IsDeletePage;

	bool showRefreshTab = true;
	bool showCancelTab = false;

	string sectionWebFormActive = " active";
	string sectionContentActive = string.Empty;
	string sectionFieldsActive = string.Empty;
	string sectionActivationActive = string.Empty;

	switch ((Model.ActiveTab ?? string.Empty).Trim().ToLower())
	{
		case "webform":
			break;

		case "content":
			sectionContentActive = " active";
			sectionWebFormActive = string.Empty;
			break;
		case "fields":
			sectionFieldsActive = " active";
			sectionWebFormActive = string.Empty;
			break;
		case "activation":
			sectionActivationActive = " active";
			sectionWebFormActive = string.Empty;
			break;

		default:
			break;
	}

	MvcHtmlString cancelUrl = null;
	MvcHtmlString cancelText = new MvcHtmlString("Cancel");
	MvcHtmlString refreshUrl = null;
	if (!Model.IsStoreAdminEdit)
	{
		cancelUrl = new MvcHtmlString("XXX");  //new MvcHtmlString(Url.Action("Display", new { DynamicPageUrl = Model.OriginalPageUrl }).Replace("//", "/"));
		refreshUrl = new MvcHtmlString(Request.Url.ToString()); // new MvcHtmlString("XXX"); //new MvcHtmlString(Url.Action("Edit", new { DynamicPageUrl = Model.OriginalPageUrl }));
	}
	else
	{
		if (!isDeletePage)
		{
			cancelText = new MvcHtmlString("OK");
		}
		showRefreshTab = false;
		if (Html.UserHasPermission(GStoreAction.WebForms_Manager))
		{
			cancelUrl = new MvcHtmlString(Url.Action("Manager"));
		}
		else
		{
			cancelUrl = new MvcHtmlString(Url.Action("Index", "StoreAdmin"));
		}
		if (Model.WebFormId == default(int))
		{
			showRefreshTab = false;
		}
		else
		{
			refreshUrl = new MvcHtmlString(Url.Action("Edit", new { id = Model.WebFormId }));
		}
	}
}
<style>
	.form-group .form-control {
		padding-top: 0;
		margin-top: 0;
		padding-bottom: 0;
		margin-bottom: 10px;
	}

	.form-group label {
		padding-top: 0;
		margin-top: 5px;
		padding-bottom: 0;
		margin-bottom: 0;
	}
</style>
<script>
	function ShowFormHeaderPreview() {
		FormHeaderPreview.hidden = false;
		FormHeaderShowPreviewLink.hidden = true;
		FormHeaderHidePreviewLink.hidden = false;
	}
	function HideFormHeaderPreview() {
		FormHeaderPreview.hidden = true;
		FormHeaderShowPreviewLink.hidden = false;
		FormHeaderHidePreviewLink.hidden = true;
	}
	function ShowFormHeaderCode() {
		FormHeaderCode.hidden = false;
		FormHeaderShowCodeLink.hidden = true;
		FormHeaderHideCodeLink.hidden = false;
	}
	function HideFormHeaderCode() {
		FormHeaderCode.hidden = true;
		FormHeaderShowCodeLink.hidden = false;
		FormHeaderHideCodeLink.hidden = true;
	}

	function ShowFormFooterBeforePreview() {
		FormFooterBeforePreview.hidden = false;
		FormFooterBeforeShowPreviewLink.hidden = true;
		FormFooterBeforeHidePreviewLink.hidden = false;
	}
	function HideFormFooterBeforePreview() {
		FormFooterBeforePreview.hidden = true;
		FormFooterBeforeShowPreviewLink.hidden = false;
		FormFooterBeforeHidePreviewLink.hidden = true;
	}
	function ShowFormFooterBeforeCode() {
		FormFooterBeforeCode.hidden = false;
		FormFooterBeforeShowCodeLink.hidden = true;
		FormFooterBeforeHideCodeLink.hidden = false;
	}
	function HideFormFooterBeforeCode() {
		FormFooterBeforeCode.hidden = true;
		FormFooterBeforeShowCodeLink.hidden = false;
		FormFooterBeforeHideCodeLink.hidden = true;
	}

	function ShowFormFooterAfterPreview() {
		FormFooterAfterPreview.hidden = false;
		FormFooterAfterShowPreviewLink.hidden = true;
		FormFooterAfterHidePreviewLink.hidden = false;
	}
	function HideFormFooterAfterPreview() {
		FormFooterAfterPreview.hidden = true;
		FormFooterAfterShowPreviewLink.hidden = false;
		FormFooterAfterHidePreviewLink.hidden = true;
	}
	function ShowFormFooterAfterCode() {
		FormFooterAfterCode.hidden = false;
		FormFooterAfterShowCodeLink.hidden = true;
		FormFooterAfterHideCodeLink.hidden = false;
	}
	function HideFormFooterAfterCode() {
		FormFooterAfterCode.hidden = true;
		FormFooterAfterShowCodeLink.hidden = false;
		FormFooterAfterHideCodeLink.hidden = true;
	}

	function SetActiveTab(tabName) {
		if (document.getElementById('WebFormEditAdminViewModel_ActiveTab')) {
			document.getElementById('WebFormEditAdminViewModel_ActiveTab').value = tabName;
		}
		if (document.getElementById('ActiveTab')) {
			document.getElementById('ActiveTab').value = tabName;
		}
	}

</script>
<ul class="nav nav-tabs row col-md-offset-2 col-md-10" style="width:100%">
	<li class="@(sectionWebFormActive)"><a data-toggle="tab" href="#sectionWebForm" onclick="SetActiveTab('WebForm');">Web Form</a></li>
	<li class="@(sectionContentActive)"><a data-toggle="tab" href="#sectionContent" onclick="SetActiveTab('Content');">Content</a></li>
	<li class="@(sectionFieldsActive)"><a data-toggle="tab" href="#sectionFields" onclick="SetActiveTab('Fields');">Fields</a></li>
	<li class="@(sectionActivationActive)"><a data-toggle="tab" href="#sectionActivation" onclick="SetActiveTab('Activation');">Activation</a></li>
	@{
		if (showCancelTab)
		{
			<li class=""><a href="@(cancelUrl)">@(cancelText)</a></li>
		}
	}
	@{
		if (showRefreshTab)
		{
			<li class=""><a href="@(refreshUrl)">Refresh</a></li>
		}
	}
</ul>
@Html.HiddenFor(model => model.ActiveTab)

<div class="tab-content">

	<div id="sectionWebForm" class="tab-pane fade in @(sectionWebFormActive)">
		<div class="row form-group text-left-md text-left-lg">

			<div class="row bg-success">
				<div class="col-md-offset-3 col-md-7">
					<h3 class="">Web Form</h3>
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.WebFormId, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.DisplayFor(model => model.WebFormId)
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.WebFormId, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.DisplayFor(model => model.Name)
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.Name, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.DisplayFor(model => model.Description)
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.Description, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.Order, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.DisplayFor(model => model.Order)
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.Order, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.WebFormResponses, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.DisplayFor(model => model.WebFormResponses.Count, "int", null)
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.WebFormResponses, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

		</div>
	</div>

	<div id="sectionContent" class="tab-pane fade in@(sectionContentActive)">
		<div class="row form-group text-left-md text-left-lg">

			<div class="row bg-success">
				<div class="col-md-offset-3 col-md-7">
					<h3 class="">Form Content</h3>
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.DisplayFor(model => model.Title)
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.Title, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.FormHeaderHtml, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@{
						if (string.IsNullOrEmpty(Model.FormHeaderHtml))
						{
							@:(blank)
						}
						else
						{
							<a id="FormHeaderShowPreviewLink" href="#" onclick="ShowFormHeaderPreview(); return false;">Show Preview</a>
							<a id="FormHeaderHidePreviewLink" href="#" hidden="hidden" onclick="HideFormHeaderPreview(); return false;">Hide Preview</a>
							@:&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;
							<a id="FormHeaderShowCodeLink" href="#" onclick="ShowFormHeaderCode(); return false;">Show HTML Code</a>
							<a id="FormHeaderHideCodeLink" href="#" hidden="hidden" onclick="HideFormHeaderCode(); return false;">Hide HTML Code</a>
							<div id="FormHeaderPreview" class="table-bordered" hidden="hidden" style="">
								<strong>Preview</strong><hr />
								@Html.Raw(Model.FormHeaderHtml)
							</div>
							<div id="FormHeaderCode" class="table-bordered" hidden="hidden">
								<strong>HTML Code</strong><hr />
								@(Model.FormHeaderHtml)
							</div>
						}
					}
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.FormHeaderHtml, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.DisplayTemplateName, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.DisplayFor(model => model.DisplayTemplateName)
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.DisplayTemplateName, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.LabelMdColSpan, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.DisplayFor(model => model.LabelMdColSpan)
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.LabelMdColSpan, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.FieldMdColSpan, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.DisplayFor(model => model.FieldMdColSpan)
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.FieldMdColSpan, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.FormFooterBeforeSubmitHtml, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
				@{
					if (string.IsNullOrEmpty(Model.FormFooterBeforeSubmitHtml))
					{
						@:(blank)
					}
					else
					{
						<a id="FormFooterBeforeShowPreviewLink" href="#" onclick="ShowFormFooterBeforePreview(); return false;">Show Preview</a>
						<a id="FormFooterBeforeHidePreviewLink" href="#" hidden="hidden" onclick="HideFormFooterBeforePreview(); return false;">Hide Preview</a>
						@:&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;
						<a id="FormFooterBeforeShowCodeLink" href="#" onclick="ShowFormFooterBeforeCode(); return false;">Show HTML Code</a>
						<a id="FormFooterBeforeHideCodeLink" href="#" hidden="hidden" onclick="HideFormFooterBeforeCode(); return false;">Hide HTML Code</a>
						<div id="FormFooterBeforePreview" class="table-bordered" hidden="hidden" style="">
							<strong>Preview</strong><hr />
							@Html.Raw(Model.FormFooterBeforeSubmitHtml)
						</div>
						<div id="FormFooterBeforeCode" class="table-bordered" hidden="hidden">
							<strong>HTML Code</strong><hr />
							@(Model.FormFooterBeforeSubmitHtml)
						</div>
					}
				}
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.FormFooterBeforeSubmitHtml, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.SubmitButtonText, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.DisplayFor(model => model.SubmitButtonText)
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.SubmitButtonText, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.SubmitButtonClass, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.DisplayFor(model => model.SubmitButtonClass)
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.SubmitButtonClass, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.FormFooterAfterSubmitHtml, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@{
						if (string.IsNullOrEmpty(Model.FormFooterAfterSubmitHtml))
						{
							@:(blank)
						}
						else
						{
							<a id="FormFooterAfterShowPreviewLink" href="#" onclick="ShowFormFooterAfterPreview(); return false;">Show Preview</a>
							<a id="FormFooterAfterHidePreviewLink" href="#" hidden="hidden" onclick="HideFormFooterAfterPreview(); return false;">Hide Preview</a>
							@:&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;
							<a id="FormFooterAfterShowCodeLink" href="#" onclick="ShowFormFooterAfterCode(); return false;">Show HTML Code</a>
							<a id="FormFooterAfterHideCodeLink" href="#" hidden="hidden" onclick="HideFormFooterAfterCode(); return false;">Hide HTML Code</a>
							<div id="FormFooterAfterPreview" class="table-bordered" hidden="hidden" style="">
								<strong>Preview</strong><hr />
								@Html.Raw(Model.FormFooterAfterSubmitHtml)
							</div>
							<div id="FormFooterAfterCode" class="table-bordered" hidden="hidden">
								<strong>HTML Code</strong><hr />
								@(Model.FormFooterAfterSubmitHtml)
							</div>
						}
					}
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.FormFooterAfterSubmitHtml, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>
		</div>
	</div>

	<div id="sectionFields" class="tab-pane fade in@(sectionFieldsActive)">
		<div class="row form-group text-left-md text-left-lg">
			<div class="row bg-success">
				<div class="col-md-offset-3 col-md-7">
					<h3 class="">Web Form Fields (@fields.Count.ToString("N0"))</h3>
				</div>
			</div>

			@Html.HiddenFor(model => model.SortAscending)
			@Html.HiddenFor(model => model.SortBy)
			<script>
				function ApplyFieldSort(sortBy, sortAscending) {
					if (document.getElementById("SortBy")) {
						document.getElementById("SortBy").value = sortBy;
					}
					if (document.getElementById("SortAscending")) {
						document.getElementById("SortAscending").value = sortAscending;
					}
					document.forms[0].submit();
				}

			</script>
			@{
				if (fields.Count == 0)
				{
					<h3 class="col-md-offset-3 col-md-9 title-align">There are no fields for this form. Click Edit to add fields.</h3>
				}
				else
				{
					WebFormFieldEditAdminViewModel nullModel = null;
					<div class="table-responsive">
						<table class="table table-hover table-striped">
							<tr>
								<th class="text-center">@Html.ActionSortLink("Default Sort", "Details", "", "Fields")</th>
								<th class="text-center">@Html.ActionSortLinkForItem(model => nullModel.LabelText, "Details", true, true, "Fields")</th>
								<th class="text-center">@Html.ActionSortLinkForItem(model => nullModel.Name, "Details", true, true, "Fields")</th>
								<th class="text-center">@Html.ActionSortLinkForItem(model => nullModel.DataTypeString, "Details", true, true, "Fields")</th>
								<th class="text-center">@Html.ActionSortLinkForItem(model => nullModel.IsRequired, "Details", true, true, "Fields")</th>
								<th class="text-center">@Html.ActionSortLinkForItem(model => nullModel.ValueList, "Details", true, true, "Fields")</th>
								<th class="text-center">@Html.ActionSortLinkForItem(model => nullModel.WebFormFieldResponses, "Details", true, true, "Fields")</th>
								<th class="text-center">@Html.ActionSortLinkForItem(model => nullModel.Order, "Details", true, true, "Fields")</th>
								<th class="text-center">@Html.ActionSortLinkForItem(model => nullModel.WebFormFieldId, "Details", true, true, "Fields")</th>
								<th class="text-center">@Html.ActionSortLinkForItem(model => nullModel.IsActiveDirect, "Details", true, true, "Fields")</th>
								<th class="text-center">@Html.ActionSortLinkForItem(model => nullModel.IsPending, "Details", true, true, "Fields")</th>
								<th class="text-center">@Html.ActionSortLinkForItem(model => nullModel.StartDateTimeUtc, "Details", true, true, "Fields")</th>
								<th class="text-center">@Html.ActionSortLinkForItem(model => nullModel.EndDateTimeUtc, "Details", true, true, "Fields")</th>
							</tr>

							@{
					int index = 0;
					foreach (WebFormFieldEditAdminViewModel fieldModel in fields)
					{
						string htmlFieldName = "WebFormFields[" + index + "]";
						string fieldRowClass = fieldModel.IsActiveDirect ? "" : "text-warning";
						MvcHtmlString popupfieldOnClick = new MvcHtmlString(" onclick=\"$('#FieldEditModal_" + fieldModel.Index + "').modal('show');\"");

						@:
																										<tr class="@(fieldRowClass)">
						<td class="text-center">
							<span id="EditFieldLink_@(fieldModel.Index)">
								<button id="EditFieldButton_@(fieldModel.Index) " type="button" class="btn btn-xs btn-success" data-toggle="modal" data-target="#FieldEditModal_@(fieldModel.Index)">
									Field Details
								</button>
								@(fieldModel.Index + 1)
							</span>
						</td>
						<td class="text-center" @(popupfieldOnClick)>@Html.DisplayFor(model => fieldModel.LabelText, templateName: null, htmlFieldName: htmlFieldName)</td>
						<td class="text-center" @(popupfieldOnClick)>@Html.DisplayFor(model => fieldModel.Name, templateName: null, htmlFieldName: htmlFieldName)</td>
						<td class="text-center" @(popupfieldOnClick)>@Html.DisplayFor(model => fieldModel.DataTypeString, templateName: null, htmlFieldName: htmlFieldName)</td>
						<td class="text-center" @(popupfieldOnClick)>@Html.DisplayFor(model => fieldModel.IsRequired, templateName: null, htmlFieldName: htmlFieldName)</td>
						<td class="text-center" @(popupfieldOnClick)>@Html.DisplayFor(model => fieldModel.ValueList, templateName: null, htmlFieldName: htmlFieldName)</td>
						<td class="text-center" @(popupfieldOnClick)>@Html.DisplayFor(model => fieldModel.WebFormFieldResponses.Count, templateName: null, htmlFieldName: htmlFieldName)</td>
						<td class="text-center" @(popupfieldOnClick)>@Html.DisplayFor(model => fieldModel.Order, templateName: null, htmlFieldName: htmlFieldName)</td>
						<td class="text-center" @(popupfieldOnClick)>@Html.DisplayFor(model => fieldModel.WebFormFieldId, templateName: null, htmlFieldName: htmlFieldName)</td>
						<td class="text-center" @(popupfieldOnClick)>
							@{
						if (fieldModel.IsActiveDirect)
						{
								<span class="text-success">ACTIVE</span>
						}
						else
						{
								<span class="text-warning">INACTIVE</span>
						}
							}
						</td>

						<td class="text-center" @(popupfieldOnClick)>@Html.DisplayFor(model => fieldModel.IsPending, templateName: null, htmlFieldName: htmlFieldName)</td>
						<td class="text-center" @(popupfieldOnClick)>@Html.DisplayFor(model => fieldModel.StartDateTimeUtc, templateName: null, htmlFieldName: htmlFieldName)</td>
						<td class="text-center" @(popupfieldOnClick)>@Html.DisplayFor(model => fieldModel.EndDateTimeUtc, templateName: null, htmlFieldName: htmlFieldName)</td>
								</tr>
					}
					}
					</table>
				</div>

				foreach (WebFormFieldEditAdminViewModel fieldModel in fields)
				{
				@Html.DisplayFor(model => fieldModel, "WebFormFieldEditAdminViewModel_HiddenPopup")
				}
				}
				}
			</div>
		</div>

		<div id="sectionActivation" class="tab-pane fade in@(sectionActivationActive)">
			<div class="row form-group text-left-md text-left-lg">

				<div class="row bg-success">
					<div class="col-md-offset-3 col-md-7">
						<h3 class="">Activation</h3>
					</div>
				</div>

				<p class="col-md-offset-3 col-md-9">Store Local Time: @(DateTime.UtcNow.ToStoreDateTimeString(Html))</p>
				<p class="col-md-offset-3 col-md-9">Current UTC Time: @(DateTime.UtcNow.ToString())</p>

				<div class="form-group">
					<label class="text-right control-label col-md-3">Status</label>
					<div class="col-md-9 text-left">
						<p style="padding-top: 5px;">
							<strong class="title-align @(Model.IsActiveDirect ? "text-success" : "text-warning")">@(Model.IsActiveDirect ? "Active" : "Inactive")</strong>
						</p>
					</div>
					<div class="row">
						@Html.HelpLabelFor(model => model.IsActiveDirect, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
					</div>
				</div>

				<div class="form-group">
					@Html.LabelFor(model => model.IsPending, htmlAttributes: new { @class = "text-right control-label col-md-3" })
					<div class="col-md-9 text-left">
						@Html.DisplayFor(model => model.IsPending)
					</div>
					<div class="row">
						@Html.HelpLabelFor(model => model.IsPending, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
					</div>
				</div>

				<div class="form-group">
					@Html.LabelFor(model => model.StartDateTimeUtc, htmlAttributes: new { @class = "text-right control-label col-md-3" })
					<div class="col-md-9 text-left">
						@Html.DisplayFor(model => model.StartDateTimeUtc)
					</div>
					<div class="row">
						@Html.HelpLabelFor(model => model.StartDateTimeUtc, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
					</div>
				</div>

				<div class="form-group">
					@Html.LabelFor(model => model.EndDateTimeUtc, htmlAttributes: new { @class = "text-right control-label col-md-3" })
					<div class="col-md-9 text-left">
						@Html.DisplayFor(model => model.EndDateTimeUtc)
					</div>
					<div class="row">
						@Html.HelpLabelFor(model => model.EndDateTimeUtc, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
					</div>
				</div>


			</div>
		</div>

	</div>
