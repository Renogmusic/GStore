@model StoreAdminViewModel
@{
	string dashboard = (ViewData["Dashboard"] as string) ?? string.Empty;
	string title = (ViewData["DashboardTitle"] as string) ?? string.Empty;
	string location = (ViewData["DashboardLocation"] as string) ?? string.Empty;
	DashboardDateTimeRange dateTimeRange = (ViewData["DashboardDateTimeRange"] as DashboardDateTimeRange?) ?? DashboardDateTimeRange.Past15Minutes;
	DateTime startDateTimeUtc = dateTimeRange.ToStartDateTimeUtc();
	DateTime endDateTimeUtc = dateTimeRange.ToEndDateTimeUtc();
	int storeFrontId = Html.CurrentStoreFront(true).StoreFrontId;

	var data = Html.GStoreDb().UserActionEvents
		.Where(p => p.StoreFrontId == storeFrontId && p.CreateDateTimeUtc > startDateTimeUtc && p.CreateDateTimeUtc < endDateTimeUtc && p.Category == UserActionCategoryEnum.Cart && p.Action == UserActionActionEnum.Cart_AddToCartSuccess)
		.GroupBy(p => new { ProductUrlName = p.ProductUrlName, ProductBundleUrlName = p.ProductBundleUrlName })
		.OrderByDescending(p => p.Count())
		.Take(10);
}
<div class="well text-warning">
	<span class="btn btn-info NoClick">@(title)</span><br />
	<p>
		@{ int counter = 0;}
		@foreach (var cat in data)
		{
			counter++;
			Product product = Html.ProductFromUrlNameOrNull(cat.First().ProductUrlName);
			ProductBundle productBundle = Html.ProductBundleFromUrlNameOrNull(cat.First().ProductBundleUrlName);
			if (product != null)
			{
				@(counter + ". ") @(product.Name) @: - @(cat.Count())<br />
			}
			else if (productBundle != null)
			{
				@(counter + ". ") @(productBundle.Name) @: [bundle] - @(cat.Count())<br />
			}
			else
			{
				@(counter + ". ") @:Unknown product - @(cat.Count())<br />
			}
		}
		@{
			if (counter < 10)
			{
				@Html.Repeat("-<br/>", 10 - counter);
			}
		}
	</p>
</div>