@model StoreFrontConfigAdminViewModel

@using (Html.BeginForm())
{
	SelectList userProfileList = ViewBag.UserProfileList as SelectList;

	string tabBasicActive = string.Empty;
	string tabAdminsActive = string.Empty;
	string tabMetaTagsActive = string.Empty;
	string tabTrackingActive = string.Empty;
	string tabThemesActive = string.Empty;
	string tabCartActive = string.Empty;
	string tabCheckoutActive = string.Empty;
	string tabPaymentsActive = string.Empty;
	string tabCatalogLayoutActive = string.Empty;
	string tabErrorPagesActive = string.Empty;
	string tabRegistrationActive = string.Empty;
	string tabLayoutsActive = string.Empty;
	string tabActivationActive = string.Empty;

	string bgcolor = "bg-warning";
	if (Model.IsCreatePage)
	{
		bgcolor = "bg-info";
	}

	switch ((Model.ActiveTab ?? string.Empty).ToLower())
	{
		case "":
		case "basic":
			tabBasicActive = "active";
			break;
		case "admins":
			tabAdminsActive = "active";
			break;
		case "metatags":
			tabMetaTagsActive = "active";
			break;
		case "tracking":
			tabTrackingActive = "active";
			break;
		case "themes":
			tabThemesActive = "active";
			break;
		case "cart":
			tabCartActive = "active";
			break;
		case "checkout":
			tabCheckoutActive = "active";
			break;
		case "payments":
			tabPaymentsActive = "active";
			break;
		case "cataloglayout":
			tabCatalogLayoutActive = "active";
			break;
		case "errorpages":
			tabErrorPagesActive = "active";
			break;
		case "registration":
			tabRegistrationActive = "active";
			break;
		case "layouts":
			tabLayoutsActive = "active";
			break;
		case "activation":
			tabActivationActive = "active";
			break;
		default:
			goto case "";
	}

	ViewData.SetColDisplay(1, 2, 8);

	<script>
		function JumpToViewTab() {
			var url = '@(Html.Raw(Url.Action("StoreFrontView", new { id = Model.StoreFrontId, storeFrontConfigId = Model.StoreFrontConfigurationId, Tab = "XXXX"}).ToJavaScriptString()))';
			var tabName = GetActiveTab();
			document.location = url.replace("XXXX", tabName);
		}
		function GetActiveTab() {
			if (document.getElementById('ActiveTab')) {
				return document.getElementById('ActiveTab').value
			}
			return "";
		}
		function SetActiveTab(tabName) {
			if (document.getElementById('ActiveTab')) {
				document.getElementById('ActiveTab').value = tabName;
			}
		}

		function MakeItActive() {
			if (document.getElementById('IsPending')) {
				document.getElementById('IsPending').checked = false;
			}
			if (document.getElementById('StartDateTimeUtc')) {
				document.getElementById('StartDateTimeUtc').value = '@(Html.Raw(DateTime.UtcNow.AddMinutes(-1).ToString().ToJavaScriptString()))';
			}
			if (document.getElementById('EndDateTimeUtc')) {
				document.getElementById('EndDateTimeUtc').value = '@(Html.Raw(DateTime.UtcNow.AddYears(100).ToString().ToJavaScriptString()))';
			}
		}
	</script>

	@Html.AntiForgeryToken()

	if (Model.IsCreatePage)
	{
		<div class="row">
			<h2 class="jumbotron StoreAdminEditPageTitle col-md-offset-2 col-md-7 text-info title-align">
				<span class="text-info">Create New Store Front Configuration</span><br />
				<small>
					@(Html.DisplayNameFor(model => model.ConfigurationName)): '@(Html.DisplayFor(model => model.ConfigurationName))'<br />
					@(Html.DisplayNameFor(model => model.StoreFront)): '@(Model.Name)' [@(Model.StoreFrontId)]
				</small>
			</h2>
		</div>
	}
	else
	{
		<div class="row">
			<h2 class="jumbotron StoreAdminEditPageTitle col-md-offset-2 col-md-7 text-warning title-align">
				<span class="text-warning">Edit Store Front Configuration</span><br />
				<small>
					@(Html.DisplayNameFor(model => model.ConfigurationName)): '@(Html.DisplayFor(model => model.ConfigurationName))' [@(Model.StoreFrontConfigurationId)]<br />
					@(Html.DisplayNameFor(model => model.StoreFront)): '@(Model.Name)' [@(Model.StoreFrontId)]
				</small>
			</h2>
		</div>
	}

	if (Model.IsCreatePage)
	{
		<div class="row">
			<div class="form-actions col-md-offset-3 col-md-9">
				<input type="submit" value="Create" class="btn btn-info" />
				&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
				@Html.ActionLink("OK / Cancel", "Manager", null, new { @class = "btn btn-default" })
			</div>
		</div>
	}
	else
	{
		<div class="row">
			<div class="form-actions col-md-offset-3 col-md-9">
				<input type="submit" value="Save" class="btn btn-warning" />
				&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
				<a class="btn btn-default" href="#" onclick="JumpToViewTab();">OK / Cancel</a>
			</div>
		</div>
	}

	<div class="row">
		<div class="form-validation col-md-offset-3 col-md-9">
			@Html.ValidationSummary(false, "", new { @class = "text-danger bold" })
		</div>
	</div>

	<div class="form-horizontal">

		<ul class="nav nav-tabs row col-md-offset-3 col-md-9" style="width:100%">
			<li class="@(tabBasicActive)"><a data-toggle="tab" href="#sectionBasic" onclick="SetActiveTab('Basic');">Basic</a></li>
			<li class="@(tabAdminsActive)"><a data-toggle="tab" href="#sectionAdmins" onclick="SetActiveTab('Admins');">Admins</a></li>
			<li class="@(tabMetaTagsActive)"><a data-toggle="tab" href="#sectionMetaTags" onclick="SetActiveTab('MetaTags');">Meta Tags</a></li>
			<li class="@(tabTrackingActive)"><a data-toggle="tab" href="#sectionTracking" onclick="SetActiveTab('Tracking');">Tracking</a></li>
			<li class="@(tabThemesActive)"><a data-toggle="tab" href="#sectionThemes" onclick="SetActiveTab('Themes');">Themes</a></li>
			<li class="@(tabCartActive)"><a data-toggle="tab" href="#sectionCart" onclick="SetActiveTab('Cart');">Cart</a></li>
			<li class="@(tabCheckoutActive)"><a data-toggle="tab" href="#sectionCheckout" onclick="SetActiveTab('Checkout');">Checkout</a></li>
			<li class="@(tabPaymentsActive)"><a data-toggle="tab" href="#sectionPayments" onclick="SetActiveTab('Payments');">Payments</a></li>
			<li class="@(tabCatalogLayoutActive)"><a data-toggle="tab" href="#sectionCatalogLayout" onclick="SetActiveTab('CatalogLayout');">Catalog Layout</a></li>
			<li class="@(tabErrorPagesActive)"><a data-toggle="tab" href="#sectionErrorPages" onclick="SetActiveTab('ErrorPages');">Error Pages</a></li>
			<li class="@(tabRegistrationActive)"><a data-toggle="tab" href="#sectionRegistration" onclick="SetActiveTab('Registration');">Registration</a></li>
			<li class="@(tabLayoutsActive)"><a data-toggle="tab" href="#sectionLayouts" onclick="SetActiveTab('Layouts');">Layouts</a></li>
			<li class="@(tabActivationActive)"><a data-toggle="tab" href="#sectionActivation" onclick="SetActiveTab('Activation');">Activation</a></li>
		</ul>
		@Html.HiddenFor(model => model.ActiveTab)

		<div class="tab-content">

			<div id="sectionBasic" class="tab-pane fade in @(tabBasicActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 @(bgcolor) title-align">Basic Info</h3>
				</div>

				@Html.EditorFor(model => model.StoreFrontId, "FieldKey")
				@Html.EditorFor(model => model.StoreFrontConfigurationId, "FieldKey")


				@{
	if (!Model.IsCreatePage)
	{
		<div class="form-group">
			@Html.LabelFor(model => model.StoreFrontConfigurationId, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-9">
				@Html.DisplayFor(model => model.StoreFrontConfigurationId)
			</div>
			@Html.HelpLabelFor(model => model.StoreFrontConfigurationId, new { @class = "row help-label col-md-offset-3 col-md-9 title-align" })
		</div>
	}
				}

				@Html.EditorFor(model => model.Name, "FieldText")
				@Html.EditorFor(model => model.ConfigurationName, "FieldText")
				@Html.EditorFor(model => model.PublicUrl, "FieldUrl")
				@Html.EditorFor(model => model.TimeZoneId, "FieldTimeZone")
				@Html.EditorFor(model => model.HtmlFooter, "FieldHtml")
				@Html.EditorFor(model => model.HomePageUseCatalog, "FieldCheckbox")
				@Html.EditorFor(model => model.HomePageUseBlog, "FieldCheckbox")
				@Html.EditorFor(model => model.ShowBlogInMenu, "FieldCheckbox")
				@Html.EditorFor(model => model.ShowAboutGStoreMenu, "FieldCheckbox")
				@Html.EditorFor(model => model.NavBarItemsMaxLevels, "FieldInt")
				@Html.EditorFor(model => model.Order, "FieldInt")
				@Html.EditorFor(model => model.Folder, "FieldText")
				@Html.EditorFor(model => model.ChatEnabled, "FieldCheckbox")
				@Html.EditorFor(model => model.ChatRequireLogin, "FieldCheckbox")
			</div>

			<div id="sectionAdmins" class="tab-pane fade in @(tabAdminsActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 @(bgcolor) title-align">Admin Users</h3>
				</div>

				@Html.EditorFor(model => model.AccountAdmin_UserProfileId, "FieldUserProfileId")
				@Html.EditorFor(model => model.RegisteredNotify_UserProfileId, "FieldUserProfileId")
				@Html.EditorFor(model => model.WelcomePerson_UserProfileId, "FieldUserProfileId")
				@Html.EditorFor(model => model.OrderAdmin_UserProfileId, "FieldUserProfileId")

			</div>

			<div id="sectionMetaTags" class="tab-pane fade in @(tabMetaTagsActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 @(bgcolor) title-align">Meta Tags</h3>
				</div>

				@Html.EditorFor(model => model.MetaApplicationName, "FieldText")
				@Html.EditorFor(model => model.MetaApplicationTileColor, "FieldText")
				@Html.EditorFor(model => model.MetaDescription, "FieldTextArea")
				@Html.EditorFor(model => model.MetaKeywords, "FieldTextArea")
				@Html.EditorFor(model => model.BodyTopScriptTag, "FieldTextArea")
				@Html.EditorFor(model => model.BodyBottomScriptTag, "FieldTextArea")
			</div>

			<div id="sectionTracking" class="tab-pane fade in @(tabTrackingActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 @(bgcolor) title-align">Tracking</h3>
				</div>

				@Html.EditorFor(model => model.EnableGoogleAnalytics, "FieldCheckbox")
				@Html.EditorFor(model => model.GoogleAnalyticsWebPropertyId, "FieldText")

			</div>

			<div id="sectionThemes" class="tab-pane fade in @(tabThemesActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 @(bgcolor) title-align">Themes</h3>
				</div>

				@Html.EditorFor(model => model.DefaultNewPageThemeId, "FieldThemeId")
				@Html.EditorFor(model => model.CatalogThemeId, "FieldThemeId")
				@Html.EditorFor(model => model.AccountThemeId, "FieldThemeId")
				@Html.EditorFor(model => model.CartThemeId, "FieldThemeId")
				@Html.EditorFor(model => model.CheckoutThemeId, "FieldThemeId")
				@Html.EditorFor(model => model.OrdersThemeId, "FieldThemeId")
				@Html.EditorFor(model => model.OrderAdminThemeId, "FieldThemeId")
				@Html.EditorFor(model => model.NotificationsThemeId, "FieldThemeId")
				@Html.EditorFor(model => model.ProfileThemeId, "FieldThemeId")
				@Html.EditorFor(model => model.CatalogAdminThemeId, "FieldThemeId")
				@Html.EditorFor(model => model.AdminThemeId, "FieldThemeId")
				@Html.EditorFor(model => model.BlogThemeId, "FieldThemeId")
				@Html.EditorFor(model => model.BlogAdminThemeId, "FieldThemeId")
				@Html.EditorFor(model => model.ChatThemeId, "FieldThemeId")

				<div style="border: 1px solid red;">
					@Html.EditorFor(model => model.ResetPagesToThemeId, "FieldThemeIdNullable", new { OptionLabel = "(none: leave with current theme)" })
				</div>

			</div>

			<div id="sectionCart" class="tab-pane fade in @(tabCartActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 @(bgcolor) title-align">Cart Info</h3>
				</div>

				@Html.EditorFor(model => model.UseShoppingCart, "FieldCheckbox")
				@Html.EditorFor(model => model.CartNavShowCartToAnonymous, "FieldCheckbox")
				@Html.EditorFor(model => model.CartNavShowCartToRegistered, "FieldCheckbox")
				@Html.EditorFor(model => model.CartNavShowCartWhenEmpty, "FieldCheckbox")
				@Html.EditorFor(model => model.CartRequireLogin, "FieldCheckbox")

				<div class="form-group">
					<label class="control-label col-md-3">Cart Configuration</label>
					<div class="col-md-9">
						@if (Model.IsCreatePage)
						{
							<p>Create the configuration, then you can preview, view, and edit cart configuration.</p>
						}
						else
						{
							@Html.ActionLink("Preview Cart Configuration\n(new window)", "Preview", "Cart", new { Area = "", id = Model.StoreFrontConfigurationId }, new { @class = "btn btn-info" })
							@:&nbsp;&nbsp;|&nbsp;&nbsp;
							@Html.ActionLink("View Cart Configuration (new window)", "ViewConfig", "Cart", new { Area = "", id = Model.StoreFrontConfigurationId }, new { @class = "btn btn-success" })
							@:&nbsp;&nbsp;|&nbsp;&nbsp;
							@Html.ActionLink("Edit Cart Configuration (new window)", "EditConfig", "Cart", new { Area = "", id = Model.StoreFrontConfigurationId }, new { @class = "btn btn-warning" })
						}
					</div>
					<label class="row help-label col-md-offset-3 col-md-9 title-align">Click here to view or edit the shopping cart configuration. Save changes before clicking these buttons.</label>
				</div>
				<br /><br />
			</div>

			<div id="sectionCheckout" class="tab-pane fade in @(tabCheckoutActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 @(bgcolor) title-align">Checkout Info</h3>
				</div>

				@Html.EditorFor(model => model.CheckoutOrderMinimum, "FieldCurrency")
				@Html.EditorFor(model => model.CheckoutLogInOrGuestWebFormId, "FieldWebFormIdNullable")
				@Html.EditorFor(model => model.CheckoutDeliveryInfoDigitalOnlyWebFormId, "FieldWebFormIdNullable")
				@Html.EditorFor(model => model.CheckoutDeliveryInfoShippingWebFormId, "FieldWebFormIdNullable")
				@Html.EditorFor(model => model.CheckoutDeliveryMethodWebFormId, "FieldWebFormIdNullable")
				@Html.EditorFor(model => model.CheckoutPaymentInfoWebFormId, "FieldWebFormIdNullable")
				@Html.EditorFor(model => model.CheckoutConfirmOrderWebFormId, "FieldWebFormIdNullable")

				<br /><br />
			</div>

			<div id="sectionPayments" class="tab-pane fade in @(tabPaymentsActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 @(bgcolor) title-align">Payment Info</h3>
				</div>

				@Html.EditorFor(model => model.Orders_AutoAcceptPaid, "FieldCheckbox")
				@Html.EditorFor(model => model.PaymentMethod_PayPal_Enabled, "FieldCheckbox")
				@Html.EditorFor(model => model.PaymentMethod_PayPal_UseLiveServer, "FieldCheckbox")
				@Html.EditorFor(model => model.PaymentMethod_PayPal_Client_Id, "FieldText")
				@Html.EditorFor(model => model.PaymentMethod_PayPal_Client_Secret, "FieldText")

				<br /><br />
			</div>

			<div id="sectionCatalogLayout" class="tab-pane fade in @(tabCatalogLayoutActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 @(bgcolor) title-align">Catalog Layout</h3>
				</div>
				
				@Html.EditorFor(model => model.CatalogTitle, "FieldText")
				@Html.EditorFor(model => model.CatalogLayout, "FieldEnum")
				@Html.EditorFor(model => model.CatalogHeaderHtml, "FieldHtml")
				@Html.EditorFor(model => model.CatalogFooterHtml, "FieldHtml")
				@Html.EditorFor(model => model.CatalogRootListTemplate, "FieldEnum")
				@Html.EditorFor(model => model.CatalogRootHeaderHtml, "FieldHtml")
				@Html.EditorFor(model => model.CatalogRootFooterHtml, "FieldHtml")
				@Html.EditorFor(model => model.CatalogDefaultNoProductsMessageHtml, "FieldHtml")
				@Html.EditorFor(model => model.CatalogDefaultSummaryCaption, "FieldText")
				@Html.EditorFor(model => model.CatalogDefaultTopDescriptionCaption, "FieldText")
				@Html.EditorFor(model => model.CatalogDefaultSampleAudioCaption, "FieldText")
				@Html.EditorFor(model => model.CatalogDefaultSampleDownloadCaption, "FieldText")
				@Html.EditorFor(model => model.CatalogDefaultSampleImageCaption, "FieldText")
				@Html.EditorFor(model => model.CatalogDefaultBottomDescriptionCaption, "FieldText")
				@Html.EditorFor(model => model.CatalogDefaultProductTypeSingle, "FieldText")
				@Html.EditorFor(model => model.CatalogDefaultProductTypePlural, "FieldText")
				@Html.EditorFor(model => model.CatalogDefaultProductBundleTypeSingle, "FieldText")
				@Html.EditorFor(model => model.CatalogDefaultProductBundleTypePlural, "FieldText")

				@Html.EditorFor(model => model.NavBarCatalogMaxLevels, "FieldInt")
				@Html.EditorFor(model => model.CatalogPageInitialLevels, "FieldInt")
				@Html.EditorFor(model => model.CatalogCategoryColLg, "FieldInt")
				@Html.EditorFor(model => model.CatalogCategoryColMd, "FieldInt")
				@Html.EditorFor(model => model.CatalogCategoryColSm, "FieldInt")
				@Html.EditorFor(model => model.CatalogProductColLg, "FieldInt")
				@Html.EditorFor(model => model.CatalogProductColMd, "FieldInt")
				@Html.EditorFor(model => model.CatalogProductColSm, "FieldInt")
				@Html.EditorFor(model => model.CatalogProductBundleColLg, "FieldInt")
				@Html.EditorFor(model => model.CatalogProductBundleColMd, "FieldInt")
				@Html.EditorFor(model => model.CatalogProductBundleColSm, "FieldInt")
				@Html.EditorFor(model => model.CatalogProductBundleItemColLg, "FieldInt")
				@Html.EditorFor(model => model.CatalogProductBundleItemColMd, "FieldInt")
				@Html.EditorFor(model => model.CatalogProductBundleItemColSm, "FieldInt")
			</div>

			<div id="sectionErrorPages" class="tab-pane fade in @(tabErrorPagesActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 @(bgcolor) title-align">Error Pages</h3>
				</div>

				@Html.EditorFor(model => model.NotFoundError_PageId, "FieldPageIdNullable", new { OptionLabel = "(GStore System Default Not Found Error Page)" })
				@Html.EditorFor(model => model.StoreError_PageId, "FieldPageIdNullable", new { OptionLabel = "(GStore System Default Error Page)" })

			</div>


			<div id="sectionRegistration" class="tab-pane fade in @(tabRegistrationActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 @(bgcolor) title-align">Registration</h3>
				</div>

				@Html.EditorFor(model => model.NavBarShowRegisterLink, "FieldCheckbox")
				@Html.EditorFor(model => model.NavBarRegisterLinkText, "FieldText")
				@Html.EditorFor(model => model.AccountLoginShowRegisterLink, "FieldCheckbox")
				@Html.EditorFor(model => model.AccountLoginRegisterLinkText, "FieldText")
				@Html.EditorFor(model => model.Register_WebFormId, "FieldWebFormIdNullable")
				@Html.EditorFor(model => model.RegisterSuccess_PageId, "FieldPageIdNullable", new { OptionLabel = "(GStore System Default Register Success Page)" })

			</div>

			<div id="sectionLayouts" class="tab-pane fade in @(tabLayoutsActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 @(bgcolor) title-align">Layouts</h3>
				</div>
				<h1>Coming Soon</h1>
			</div>

			<div id="sectionActivation" class="tab-pane fade in @(tabActivationActive)">
				<div class="row">
					<h3 class="col-md-offset-3 col-md-7 @(bgcolor) title-align">Activation</h3>
				</div>
				<h4 class="col-md-offset-3 col-md-6 text-warning">
					Warning: editing these values incorrectly will de-activate your site.<br />
					If you are unsure what to do, click the "Make It Active Now" button to turn the configuration on with default values.<br />
					You can always log in and edit these values even if you de-activate your site.
				</h4>
				<div class="row">
					<p class="col-md-offset-3 col-md-6">Store Local Time: @(DateTime.UtcNow.ToStoreDateTimeString(Html))</p>
					<p class="col-md-offset-3 col-md-6">Current UTC Time: @(DateTime.UtcNow.ToString())</p>
				</div>

				<div class="form-group">
					<label class="control-label col-md-3">Status</label>
					<div class="col-md-9 title-align">
						<strong class="@(Model.ConfigIsActiveDirect ? "text-success" : "text-warning")">@(Model.ConfigIsActiveDirect ? "ACTIVE" : "INACTIVE")</strong>
						<a class="btn btn-xs btn-success" href="#" onclick="MakeItActive(); return false;">Make It Active Now</a>
					</div>
					<div class="row">
						@Html.HelpLabelFor(model => model.ConfigIsActiveDirect, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
					</div>
				</div>

				@Html.EditorFor(model => model.IsPending, "FieldCheckbox")
				@Html.EditorFor(model => model.StartDateTimeUtc, "FieldDateTime")
				@Html.EditorFor(model => model.EndDateTimeUtc, "FieldDateTime")

			</div>

		</div>
	</div>

	if (Model.IsCreatePage)
	{
		<div class="row">
			<div class="form-actions col-md-offset-3 col-md-9">
				<input type="submit" value="Create" class="btn btn-info" />
				&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
				@Html.ActionLink("OK / Cancel", "Manager", null, new { @class = "btn btn-default" })
			</div>
		</div>
	}
	else
	{
		<div class="row">
			<div class="form-actions col-md-offset-3 col-md-9">
				<input type="submit" value="Save" class="btn btn-warning" />
				&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
				<a class="btn btn-default" href="#" onclick="JumpToViewTab();">OK / Cancel</a>
			</div>
		</div>
	}
}
<hr />
<div>
	@if (Html.UserHasPermission(GStoreAction.ClientConfig_Manager))
	{
		@Html.ActionLink("Back to Configuration Manager", "Manager") @:&nbsp;|&nbsp;
	}
	@Html.ActionLink("Back to Store Admin", "Index", "StoreAdmin")
</div>
