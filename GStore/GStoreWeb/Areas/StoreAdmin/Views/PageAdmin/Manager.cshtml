@model PageManagerAdminViewModel

@{

	UserProfile profile = Html.CurrentUserProfile(true);
	bool userCanCreate = Model.StoreFront.Authorization_IsAuthorized(profile, GStoreAction.Pages_Create);
	bool userCanEdit = Model.StoreFront.Authorization_IsAuthorized(profile, GStoreAction.Pages_Edit);
	bool userCanDelete = Model.StoreFront.Authorization_IsAuthorized(profile, GStoreAction.Pages_Delete);

}
<script>
	function GoToDetails(index)
	{
		urlStart = '@(Url.Action("Details", new { id = 9999 } ).ToMvcJavaScriptString())';
		var url = urlStart.replace("9999", index);
		GoToUrl(url);
	}
</script>
<div class="row">
	<h2 class="jumbotron col-md-offset-3 col-md-6 StoreAdminIndexPageTitle">
		Page Manager
		<br /><small>@(Html.DisplayNameFor(model => model.StoreFront)) @Html.DisplayFor(model => model.StoreFront)</small>
	</h2>
</div>

@{
	if (userCanCreate)
	{
		<div class="row">
			<div class="col-xs-12">
				@Html.ActionLink("Create a New Page", "Create", null, new { @class = "btn btn-info" })
			</div>
		</div>
	}
}

@{
	if (Model.Pages.Count() == 0)
	{
		<div class="row">
			<div class="col-xs-12">
				<h2 class="text-warning">No Pages found for this store front.</h2>
			</div>
		</div>
	}

	else
	{
		PageEditViewModel firstRecord = null;
		
		<div class="table-responsive">
			<table class="table table-condensed table-bordered table-hover">

				<tr>
					<th class="text-center"><small>@(Html.ActionSortLink("Default", "Manager", string.Empty))</small></th>
					<th class="text-center"><small>@(Html.ActionSortLinkForItem(model => firstRecord.Order, "Manager", true))</small></th>
					<th class="text-center"><small>@(Html.ActionSortLinkForItem(model => firstRecord.PageId, "Manager", true))</small></th>
					<th class="text-center"><small>@(Html.ActionSortLink("Status", "Manager", "Status"))</small></th>
					<th class="text-center"><small>@(Html.ActionSortLinkForItem(model => firstRecord.Name, "Manager", true))</small></th>
					<th class="text-center"><small>@(Html.ActionSortLinkForItem(model => firstRecord.PageTitle, "Manager", true))</small></th>
					<th class="text-center"><small>@(Html.ActionSortLinkForItem(model => firstRecord.Url, "Manager", true))</small></th>
					<th class="text-center"><small>@(Html.ActionSortLink("Page Template", "Manager", "PageTemplate.Name"))</small></th>
					<th class="text-center"><small>@(Html.ActionSortLink("Theme", "Manager", "Theme.Name"))</small></th>
					<th class="text-center"><small>@(Html.ActionSortLink("Web Form", "Manager", "WebForm.Name"))</small></th>
					<th class="text-center"><small>@(Html.ActionSortLinkForItem(model => firstRecord.UpdateDateTimeUtc, "Manager", true))</small></th>
					<th class="text-center"><small>@(Html.ActionSortLinkForItem(model => firstRecord.UpdatedBy, "Manager", true))</small></th>
					<th class="text-center">&nbsp;</th>
				</tr>

				@{
		foreach (PageEditViewModel item in Model.PageEditViewModels)
		{
			bool isActive = item.IsActiveBubble;
			string rowClass = (isActive ? string.Empty : "text-warning");
			
			<tr class="@(rowClass)">
				<td onclick="GoToDetails(@(item.PageId));">
					@Html.ActionLink("Details", "Details", new { id = item.PageId }, new { @class = "btn btn-sm btn-success" })
					@{
						if (userCanEdit)
						{
							@:<div class="row" style="padding-bottom: 0.75em;"></div>
							@Html.ActionLink("Edit", "Edit", new { id = item.PageId }, new { @class = "btn btn-sm btn-warning" })
						}

						if (userCanDelete)
						{
							@:<div class="row" style="padding-bottom: 0.75em;"></div>
							@Html.ActionLink("Delete", "Delete", new { id = item.PageId }, new { @class = "btn btn-sm btn-danger" })
						}
					}
					<div class="row" style="padding-bottom: 0.75em;"></div>
				</td>
				<td onclick="GoToDetails(@(item.PageId));"><small>@(Html.DisplayFor(model => item.Order))</small></td>
				<td onclick="GoToDetails(@(item.PageId));"><small>@(Html.DisplayFor(model => item.PageId))</small></td>
				<td onclick="GoToDetails(@(item.PageId));">
					<span class="@(item.IsActiveDirect ? "text-success": "text-warning")">
						@(item.IsActiveDirect ? "Active" : "Inactive")
					</span>
					<br/>
						@{
							if (item.StoreFront.Authorization_IsAuthorized(profile, GStoreAction.Pages_Edit))
							{
								@Html.ActionLink("Activation", "Edit", new { id = item.PageId, Tab = "Activation" }, new { @class = "" })
							}
							else if (item.StoreFront.Authorization_IsAuthorized(profile, GStoreAction.Pages_View))
							{
								@Html.ActionLink("Activation", "Details", new { id = item.PageId, Tab = "Activation" }, new { @class = "" })
							}
						}
				</td>
				<td onclick="GoToDetails(@(item.PageId));"><small>@(Html.DisplayFor(model => item.Name))</small></td>
				<td onclick="GoToDetails(@(item.PageId));"><small>@(Html.DisplayFor(model => item.PageTitle))</small></td>
				<td>
					<small>
						<span onclick="GoToDetails(@(item.PageId));">
							@(Html.DisplayFor(model => item.Url))
						</span>
						@{
							if (isActive)
							{
								@:<br /><a target="_blank" onclick="return true;" href="@(Html.Raw(item.UrlResolved(Url)))">View Page</a>
								if (userCanEdit)
								{
									<br /><a target="_blank" onclick="return true;" href="~/Edit@(Html.Raw(item.UrlResolved(Url)))?Tab=Content">Edit Content</a>
								}
							}
						}
					</small>
				</td>
				<td onclick="GoToDetails(@(item.PageId));"><small>@(Html.DisplayFor(model => item.OriginalPageTemplate))</small></td>
				<td onclick="GoToDetails(@(item.PageId));"><small>@(Html.DisplayFor(model => item.OriginalTheme))</small></td>
				<td onclick="GoToDetails(@(item.PageId));"><small>@(Html.DisplayFor(model => item.OriginalWebForm))</small></td>
				<td onclick="GoToDetails(@(item.PageId));"><small>@(Html.DisplayFor(model => item.UpdateDateTimeUtc))</small></td>
				<td onclick="GoToDetails(@(item.PageId));"><small>@(Html.DisplayFor(model => item.UpdatedBy))</small></td>
				<td>
					@Html.ActionLink("Details", "Details", new { id = item.PageId }, new { @class = "btn btn-sm btn-success" })
					@{
						if (userCanEdit)
						{
							@:<div class="row" style="padding-bottom: 0.75em;"></div>
							@Html.ActionLink("Edit", "Edit", new { id = item.PageId }, new { @class = "btn btn-sm btn-warning" })
						}

						if (userCanDelete)
						{
							@:<div class="row" style="padding-bottom: 0.75em;"></div>
							@Html.ActionLink("Delete", "Delete", new { id = item.PageId }, new { @class = "btn btn-sm btn-danger" })
						}
					}
					<div class="row" style="padding-bottom: 0.75em;"></div>
				</td>
			</tr>
		}

				}

			</table>
		</div>
	}

}
