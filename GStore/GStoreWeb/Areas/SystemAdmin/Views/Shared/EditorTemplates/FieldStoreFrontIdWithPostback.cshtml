@model int?
@{
	int colLabel = ViewData.ColLabel();
	int colData = ViewData.ColData();
	int colOffset = ViewData.ColOffset();
	bool useHelpLabelPopover = ViewData.UseHelpLabelPopover();
	bool useHelpLabelText = ViewData.UseHelpLabelText();
	string optionLabel = ViewData.OptionLabel();
}
<script>
	function updateStoreFront(element)
	{
		$('#StoreFrontIdChanged').val('true');
		element.form.submit();
	}
</script>
<input id="StoreFrontIdChanged" type="hidden" name="StoreFrontIdChanged" value="false" />
<div class="form-group">
	@Html.LabelWithRequiredForModel(new { @class = (colOffset == 0 ? "" : "col-md-offset-" + colOffset + " ") + "col-md-" + colLabel + " title-align-right" })
	<div class="col-md-@(colData) title-align">
		@Html.DropDownListForModel(Html.StoreFrontList(null), new { onchange = "updateStoreFront(this);" }, optionLabel, true))
		@if (useHelpLabelPopover)
		{
			@Html.HelpLabelPopoverForModel()
		}
		@if (useHelpLabelText)
		{
			<br />@Html.HelpLabelForModel()
		}
		<br />
		@Html.ValidationMessageForModel()
	</div>
</div>
