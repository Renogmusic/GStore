@model IEnumerable<StoreFront>

@{
	bool isFiltered = Html.ClientIsFiltered();
	int? filterClientId = Html.FilterClientId();
}
<style>
	table th
	{
		text-align: center;
	}
	table td
	{
		text-align: center;
	}
</style>

<h2 class="jumbotron SysAdminIndexPageTitle col-md-12">Store Front Manager</h2>
<hr />
@Html.ActionLink("OK", "Index", "ClientSysAdmin", null, new { @class = "btn btn-default" })
<hr />

<p>
	@Html.ActionLink("Create New", "Create", new { clientId = filterClientId }, new { @class = "btn btn-info" })
</p>

@if (Model.Count() == 0)
{
	if (isFiltered && (!filterClientId.HasValue || filterClientId.Value == 0))
	{
		<h2 class="text-info">No Client selected. Please select a client to view or ALL.</h2>
		<h3 class="text-info">@Html.ActionLink("Click here to show records for All Clients", "Index", new { ClientId = "-1" }, null)</h3>
		<h3 class="text-info">@Html.ActionLink("Click here to Create a New Store Front", "Create", new { clientId = filterClientId }, new { @class = "btn btn-info" })</h3>
	}
	else if (isFiltered)
	{
		<h2 class="text-info">No Store Fronts found for the selected client.</h2>
		<h3 class="text-info">@Html.ActionLink("Click here to Clear Filter", "Index", new { ClientId = "-1" }, null)</h3>
		<h3 class="text-info">@Html.ActionLink("Click here to Create a New Store Front", "Create", new { clientId = filterClientId }, new { @class = "btn btn-info" })</h3>
	}
	else
	{
		<h2 class="text-info">No Store Fronts in database.</h2>
		<h3 class="text-info">@Html.ActionLink("Click here to Create a New Store Front", "Create", new { clientId = filterClientId }, new { @class = "btn btn-info" })</h3>
		<h3 class="text-info">@Html.ActionLink("Click here to Create a New Client", "Create", "ClientSysAdmin", null, new { @class = "btn btn-info" })</h3>
	}
}
else
{
	<div class="table-responsive">
		<table class="table table-hover table-striped">
			<tr>
				<th>@Html.ActionSortLink("Default Sort", "Index", string.Empty)</th>
				<th class="small">
					@Html.ActionSortLinkFor(model => model.ClientId, "Index")
				</th>
				<th class="small">
					@Html.ActionSortLinkFor(model => model.Client, "Index")
				</th>
				<th class="small">
					@Html.ActionSortLink("Client Status", "Index", "ClientStatus")
				</th>
				<th class="small">
					@Html.ActionSortLinkFor(model => model.StoreFrontId, "Index")
				</th>
				<th class="small">
					@Html.ActionSortLink("Name", "Index", "Name")
				</th>
				<th class="small">
					@Html.ActionSortLink("PublicUrl", "Index", "PublicUrl")
				</th>
				<th class="small">
					@Html.ActionSortLink("Folder", "Index", "Folder")
				</th>
				<th class="small">
					@Html.ActionSortLink("Config", "Index", "Config.Name")
				</th>
				<th class="small">
					@Html.ActionSortLink("Config Status", "Index", "Config.Status")
				</th>
				<th class="small">
					@Html.ActionSortLink("Status", "Index", "Status")
				</th>
				<th class="small">
					@Html.ActionSortLinkFor(model => model.IsPending, "Index")
				</th>
				<th class="small">
					@Html.ActionSortLinkFor(model => model.StartDateTimeUtc, "Index")
				</th>
				<th class="small">
					@Html.ActionSortLinkFor(model => model.EndDateTimeUtc, "Index")
				</th>
				<th class="small">
					@Html.ActionSortLinkFor(model => model.CreateDateTimeUtc, "Index")
				</th>
				<th class="small">
					@Html.ActionSortLinkFor(model => model.CreatedBy, "Index")
				</th>
				<th class="small">
					@Html.ActionSortLinkFor(model => model.UpdateDateTimeUtc, "Index")
				</th>
				<th class="small">
					@Html.ActionSortLinkFor(model => model.UpdatedBy, "Index")
				</th>
				<th class="small"></th>
			</tr>

			@foreach (var item in Model)
		{
			StoreFrontConfiguration config = item.CurrentConfigOrAny();
			bool clientIsActive = item.Client.IsActiveDirect();
			bool storeFrontIsActive = item.IsActiveDirect();
			bool configIsActive = (config == null ? false : config.IsActiveDirect());
			bool isAllActive = clientIsActive && storeFrontIsActive && configIsActive;
			string rowClass = (isAllActive ? "" : "text-warning");
				<tr class="@(rowClass)" onclick="GoToUrl('@Html.JavaScriptEncode(Url.Action("Details", new { @id = item.StoreFrontId }))');">
					<td>
						@Html.ActionLink("Details", "Details", new { id = item.StoreFrontId }, new { @class = "btn btn-sm btn-success" })
						@Html.ActionLink("Edit", "Edit", new { id = item.StoreFrontId }, new { @class = "btn btn-sm btn-warning" })
						@Html.ActionLink("Delete", "Delete", new { id = item.StoreFrontId }, new { @class = "btn btn-sm btn-danger" })
					</td>

					<td>
						@Html.DisplayFor(modelItem => item.Client.ClientId)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.Client.Name)
					</td>
					<td>
						@if (clientIsActive)
					{
							<span class="text-success">Active</span>
					}
					else
					{
							<span class="text-warning"><strong>Inactive</strong></span>
							<br />
							@Html.ActionLink("Activate Client", "Activate", "ClientSysAdmin", new { id = item.ClientId }, new { @class = "btn btn-sm btn-warning" });
					}
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.StoreFrontId)
					</td>
					<td>
						@Html.DisplayFor(modelItem => config.Name)
					</td>
					<td>
						@Html.DisplayFor(modelItem => config.PublicUrl)
					</td>
					<td>
						@Html.DisplayFor(modelItem => config.Folder)
					</td>
					<td>
						@Html.DisplayFor(modelItem => config.ConfigurationName)
						<br />
					</td>
					<td>
						@if (configIsActive)
						{
							<span class="text-success">Active</span>
							<br/>
							<small>@Html.ActionLink("View Config", "StoreFrontView", "ClientConfigAdmin", new { area = "StoreAdmin", id = config.StoreFrontId, storeFrontConfigId = config.StoreFrontConfigurationId }, null)</small>
							<br />
							<small>@Html.ActionLink("Edit Config", "StoreFrontEdit", "ClientConfigAdmin", new { area = "StoreAdmin", id = config.StoreFrontId, storeFrontConfigId = config.StoreFrontConfigurationId }, null)</small>
						}
						else
						{
							<span class="text-warning"><strong>Inactive</strong></span>
							<br />
							if (config == null)
							{
								<span class="text-danger">
									<small>
										No Configuration<br />
										@Html.ActionLink("Create Config", "CreateConfig", new { id = item.StoreFrontId }, new { @class="btn btn-xs btn-info" })
									</small>
								</span>
							}
							else
							{
								@Html.ActionLink("Activate Config", "ActivateConfig", new { id = config.StoreFrontConfigurationId }, new { @class = "btn btn-sm btn-warning" });
							}
						}
					</td>







					<td>
						@if (storeFrontIsActive)
					{
							<span class="text-success">Active</span>
					}
					else
					{
							<span class="text-warning"><strong>Inactive</strong></span>
							<br />
							@Html.ActionLink("Activate StoreFront", "Activate", new { id = item.StoreFrontId }, new { @class = "btn btn-sm btn-warning" });
					}
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.IsPending)
					</td>
					<td>
						<small>@Html.DisplayFor(modelItem => item.StartDateTimeUtc)</small>
					</td>
					<td>
						<small>@Html.DisplayFor(modelItem => item.EndDateTimeUtc)</small>
					</td>
					<td>
						<small>@Html.DisplayFor(modelItem => item.CreateDateTimeUtc)</small>
					</td>
					<td>
						<small>@Html.DisplayFor(modelItem => item.CreatedBy.UserName)</small>
					</td>
					<td>
						<small>@Html.DisplayFor(modelItem => item.UpdateDateTimeUtc)</small>
					</td>
					<td>
						<small>@Html.DisplayFor(modelItem => item.UpdatedBy.UserName)</small>
					</td>
					<td>
						@Html.ActionLink("Details", "Details", new { id = item.StoreFrontId }, new { @class = "btn btn-sm btn-success" })
						@Html.ActionLink("Edit", "Edit", new { id = item.StoreFrontId }, new { @class = "btn btn-sm btn-warning" })
						@Html.ActionLink("Delete", "Delete", new { id = item.StoreFrontId }, new { @class = "btn btn-sm btn-danger" })
					</td>
				</tr>
		}
		</table>
	</div>
}
<hr />
@Html.ActionLink("OK", "Index", "ClientSysAdmin", null, new { @class = "btn btn-default" })
