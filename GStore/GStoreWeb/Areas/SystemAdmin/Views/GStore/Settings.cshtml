@using System.Reflection
@{
	Assembly assembly = typeof(StoreFront).Assembly;

	StoreFront currentStoreFront = Html.CurrentStoreFront(false);
	Client currentClient = Html.CurrentClient(false);
	UserProfile currentUserProfile = Html.CurrentUserProfile(true);
	StoreBinding currentStoreBinding = Html.GetCurrentStoreBinding(false);
}
<style>
	#SystemInfo
	{
	}

		#SystemInfo .header
		{
			text-align: right;
			min-width: 20%;
			padding: 10px;
		}

		#SystemInfo .data
		{
			text-align: left;
			padding: 10px;
		}
</style>
<hr />
@Html.ActionLink("OK", "About", "GStore", null, new { @class = "btn btn-default" })
<hr />
<div class="row" style="padding-top: 1em;">
	<div class="col-sm-7 col-lg-offset-1 col-lg-6">
		<h2>Application Settings</h2>
		<strong>
			You are using GStore Version @Html.GStoreVersionNumber()<br />
			Build @Html.GStoreVersionDateString()
			<br /><br /><a href="#HowItWorks">Click here for how to set these settings</a>
		</strong>
		<hr />
		<div class="table-responsive">
			<table id="SystemInfo" class="table-hover table-bordered table-striped">
				@{
					GStoreData.Properties.Settings defaultSettings = GStoreData.Properties.Settings.Default;
					PropertyInfo[] props = typeof(GStoreData.Settings).GetProperties();
					PropertyInfo[] defaultProperties = defaultSettings.GetType().GetProperties();
					foreach (PropertyInfo prop in props)
					{
						<tr>
							<td class="header">
								@(prop.Name):
							</td>
							<td class="data">
								<strong>
									@{
						object currentValue = prop.GetValue(null, null).ToString();
						PropertyInfo defaultProp = defaultProperties.FirstOrDefault(p => p.Name == prop.Name);
						if (defaultProp == null)
						{
							@:<span class="text-danger">Unknown default for '@(prop.Name)'</span>
									}
						else
						{
							object defaultValue = defaultProp.GetValue(defaultSettings);
							if (currentValue.ToString() == defaultValue.ToString())
							{
								<span class="text-success">@defaultValue.ToString() [default]</span>
							}
							else
							{
								@:<span class="text-warning">@currentValue.ToString() (default is '@(defaultValue.ToString())')</span>
										}
						}
									}
								</strong>
							</td>
						</tr>
					}
				}
			</table>
		</div>

		<a name="HowItWorks"></a>
		<hr />
		<p>
			<strong>How to read application settings from code</strong><br />
			To read GStore settings in code, use the strongly typed functions under GStoreWeb.Settings
			<br />Example: GStoreData.Settings.AppEnableEmail
		</p>
		<p>
			<strong>How GStore determines which setting to use</strong><br />
			The Settings.Current object checks settings from 4 locations to allow overrides.
			<br /> Priority is
			<br />1) GStore_APPSETTING environment variable,
			<br />2) APPSETTING_ Azure environment variable
			<br />3) web.config,
			<br />4) Default settings in the Application Properties -&gt; Settings tab.
		</p>
		<ol class="text-left">
			<li>
				Environment Variable in the operating system with the prefix GStore_APPSETTING (option for local environments)
				<br /><strong>Notes:</strong> You can use this option to override settings.
				<br /><strong>Example How to Set:</strong> Right-click My Computer, Properties, click Advanced System Settings, Environment Variables. Under System Variables, click New.
				Enter the variable name (example: GStore_AppSetting_AppEnableEmail) and the variable value (i.e. true)
				<br /><strong>Internal Read:</strong> string value = System.Environment.GetEnvironmentVariable("GStore_APPSETTING_" + "AppEnableEmail"))
				<br /><br />
			</li>
			<li>
				Environment Variable in the operating system with the prefix APPSETTING_ (this is how Azure sets up application settings)
				<br /><strong>Notes:</strong> Only used for Azure and web hosts that use environment variables.
				<br /><strong>Example How to Set:</strong> In Azure portal, add application setting for "AppEnableEmail" (no quotes) with value "true" (no quotes)
				<br /><strong>Internal Read:</strong> string value = System.Environment.GetEnvironmentVariable("APPSETTING_" + "AppEnableEmail"))
				<br /><br />
			</li>
			<li>
				Web.Config AppSettings section
				<br /><strong>Notes:</strong> Not recommended. This is only in place because a lot of developers are familiar with it.
				<br /><strong>Example How To Set:</strong> (in web.config file, edit the setting under &lt;appSettings&gt;<br />
				&lt;setting name=&quot;AppEnableEmail&quot; serializeas=&quot;String&quot;&gt;
				&lt;value&gt;<b><u>False</u></b>&lt;/value&gt;
				&lt;/setting&gt;

				<br /><strong>Internal Read:</strong> string value = System.Web.Configuration.WebConfigurationManager.AppSettings.Get("AppEnableEmail");
				<br /><br />
			</li>
			<li>
				Properties.Default.Settings as edited on the project Settings tab
				<br /><strong>Notes:</strong> Prefered mechanism to set app settings. Simple UI in Project Properties in Visual Studio.
				<br /><strong>Example How To Set:</strong> Open GStore project in Visual Studio, Double-click "Properties" under project name, select the "Settings" tab.<br />
				Change setting on the right column, (for example AppEnableEmail) and save project.
				<br /><strong>Internal Read:</strong> value = GStoreWeb.Properties.Settings.Default.AppEnableEmail
				<br /><br />
			</li>
		</ol>

		<a href="#">Back to Top</a>


	</div>

	<div class="col-sm-5 col-lg-4">
		@{ Html.RenderPartial("_AboutGStorePartial"); }
	</div>
</div>
<hr />
@Html.ActionLink("OK", "About", "GStore", null, new { @class = "btn btn-default" })
