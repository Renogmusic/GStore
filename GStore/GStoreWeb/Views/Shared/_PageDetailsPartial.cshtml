@model PageEditViewModel
@{
	//MvcHtmlString prefix = new MvcHtmlString("viewModel[" + Model.Index + "].");
	List<SelectListItem> themeList = Model.ThemeSelectList;
	List<SelectListItem> pageTemplateList = Model.PageTemplateSelectList;
	List<SelectListItem> webFormList = Model.WebFormSelectList;
	List<SelectListItem> webFormSuccessPageList = Model.WebFormSuccessPageSelectList;

	bool isReadOnly = Model.IsReadOnly;
	bool isDeletePage = Model.IsDeletePage;

	bool showRefreshTab = true;
	bool showContentTab = true;
	bool showCancelTab = false;

	string sectionPageActive = string.Empty;
	string sectionContentActive = string.Empty;
	string sectionVariablesActive = string.Empty;
	string sectionThemeActive = string.Empty;
	string sectionMetaActive = string.Empty;
	string sectionFormActive = string.Empty;
	string sectionActivationActive = string.Empty;

	switch ((Model.ActiveTab ?? string.Empty).Trim().ToLower())
	{
		case "page":
			sectionPageActive = " active";
			break;
		case "content":
			sectionContentActive = " active";
			break;
		case "variables":
			sectionVariablesActive = " active";
			break;
		case "theme":
			sectionThemeActive = " active";
			break;
		case "meta":
			sectionMetaActive = " active";
			break;
		case "form":
			sectionFormActive = " active";
			break;
		case "activation":
			sectionActivationActive = " active";
			break;

		default:
			goto case "page";
	}

	MvcHtmlString cancelUrl = null;
	MvcHtmlString cancelText = new MvcHtmlString("Cancel");
	MvcHtmlString refreshUrl = null;
	if (!Model.IsStoreAdminEdit)
	{
		cancelUrl = new MvcHtmlString(Url.Action("Display", new { DynamicPageUrl = Model.OriginalPageUrl }).Replace("//", "/"));
		refreshUrl = new MvcHtmlString(Url.Action("Edit", new { DynamicPageUrl = Model.OriginalPageUrl }));
	}
	else
	{
		if (!isDeletePage)
		{
			cancelText = new MvcHtmlString("OK");
		}
		showContentTab = false;
		showRefreshTab = false;
		cancelUrl = new MvcHtmlString(Url.Action("Manager"));
		if (Model.PageId == default(int))
		{
			showRefreshTab = false;
		}
		else
		{
			refreshUrl = new MvcHtmlString(Url.Action("Edit", new { id = Model.PageId }));
		}
	}

	bool showVariables = (Model.Variables != null && Model.Variables.Count != 0);

}
<style>
	.form-group .form-control
	{
		padding-top: 0;
		margin-top: 0;
		padding-bottom: 0;
		margin-bottom: 10px;
	}

	.form-group label
	{
		padding-top: 0;
		margin-top: 5px;
		padding-bottom: 0;
		margin-bottom: 0;
	}
</style>
@Html.HiddenFor(model => model.ActiveTab)
<script>
	function SetActiveTab(tabName)
	{
		if (document.getElementById('PageEditViewModel_ActiveTab'))
		{
			document.getElementById('PageEditViewModel_ActiveTab').value = tabName;
		}
		if (document.getElementById('ActiveTab'))
		{
			document.getElementById('ActiveTab').value = tabName;
		}
	}
	function ShowPageSections()
	{
		if (document.getElementById('PageContent'))
		{
			document.getElementById('PageContent').hidden = false;
		}
	}
	function HidePageSections()
	{
		if (document.getElementById('PageContent'))
		{
			document.getElementById('PageContent').hidden = true;
		}
	}

	function HideFormPreview()
	{
		if (document.getElementById('PageForm'))
		{
			document.getElementById('PageForm').hidden = true;
		}
	}
	function ShowFormPreview()
	{
		if (document.getElementById('PageForm'))
		{
			document.getElementById('PageForm').hidden = false;
		}
	}

	@if (Model.ActiveTab.ToLower() == "content")
	{
		@:$(document).ready(function () { ShowPageSections(); ShowFormPreview(); })
	}
	else
	{
		@:$(document).ready(function () { HidePageSections(); HideFormPreview(); })
	}
</script>
<ul class="nav nav-tabs row col-md-offset-2 col-md-10" style="width:100%">
	<li class="@(sectionPageActive)"><a data-toggle="tab" href="#sectionPage" onclick="SetActiveTab('Page'); HidePageSections(); HideFormPreview();">Page</a></li>
	<li class="@(sectionThemeActive)"><a data-toggle="tab" href="#sectionTheme" onclick="SetActiveTab('Theme'); HidePageSections(); HideFormPreview();">Theme</a></li>
	<li class="@(sectionMetaActive)"><a data-toggle="tab" href="#sectionMeta" onclick="SetActiveTab('Meta'); HidePageSections(); HideFormPreview();">Meta</a></li>
	<li class="@(sectionFormActive)"><a data-toggle="tab" href="#sectionForm" onclick="SetActiveTab('Form'); HidePageSections(); HideFormPreview();">Form</a></li>
	<li class="@(sectionActivationActive)"><a data-toggle="tab" href="#sectionActivation" onclick="SetActiveTab('Activation'); HidePageSections(); HideFormPreview();">Activation</a></li>
	@{
		if (showContentTab)
		{
			<li class="@(sectionContentActive)"><a data-toggle="tab" href="#sectionContent" onclick="SetActiveTab('Content'); ShowPageSections(); ShowFormPreview();">Content</a></li>
		}
		if (showVariables)
		{
			<li class="@(sectionVariablesActive)"><a data-toggle="tab" href="#sectionVariables" onclick="SetActiveTab('Variables'); HidePageSections(); HideFormPreview();">Variables</a></li>
		}
}
	@{
		if (showCancelTab)
		{
			<li class=""><a href="@(cancelUrl)">@(cancelText)</a></li>
		}
	}
	@{
		if (showRefreshTab)
		{
			<li class=""><a href="@(refreshUrl)">Refresh</a></li>
		}

		if (!Model.IsCreatePage && Model.IsActiveBubble)
		{
			if (Model.IsStoreAdminEdit)
			{
				<li class=""><a target="_blank" href="@(Url.GStoreLocalUrl("/Edit/" + Model.OriginalPageUrl.Trim('~').Trim('/')))?Tab=Content"><u>Content <small>(new window)</small></u></a></li>
			}

			<li class=""><a target="_blank" href="@(Url.GStoreLocalUrl(Model.OriginalPageUrl))"><u>Live Page <small>(new window)</small></u></a></li>

			if (Model.IsStoreAdminEdit)
			{
				<li class=""><a href="@(Url.GStoreLocalUrl("/Edit/" + Model.OriginalPageUrl.Trim('~').Trim('/')))"><u>Edit in Site</u></a></li>
			}
			else
			{
				if (Html.UserHasPermission(GStoreAction.Pages_Edit))
				{
					<li class=""><a href="@(Url.Action("Edit", new { id = Model.PageId , controller = "PageAdmin", area = "StoreAdmin"} ))"><u>Edit in Store Admin</u></a></li>
				}
			}

		}


	}
</ul>



<div class="tab-content">

	<div id="sectionContent" class="tab-pane fade in@(sectionContentActive)">
		<h3 class="col-md-offset-3 col-md-9 bg-success">Page Content</h3>
	</div>

	@if (showVariables)
	{
		<div id="sectionVariables" class="tab-pane fade in@(sectionVariablesActive)">
			<div class="row form-group text-left-md text-left-lg">
				<h3 class="col-md-offset-3 col-md-9 bg-success">Variables</h3>
				@foreach (PageVariableEditViewModel variable in Model.Variables)
				{
					string dataClass = string.Empty;
					string value = variable.CurrentValue(true);
					bool isDefault = variable.CurrentValueIsDefault();
					if (!isDefault)
					{
						dataClass = " bold";
					}

					<div class="form-group">
						<label class="text-right control-label col-md-3">@(variable.PageTemplateSection.Name)</label>
						<div class="col-md-9 text-left@(dataClass)">
							@(value)
						</div>
						<div class="row">
							<div class="col-md-offset-3 col-md-9 help-label">
								@(variable.PageTemplateSection.Description)<br />
								Default: '@(variable.PageTemplateSection.DefaultStringValue)'
							</div>
						</div>
					</div>
				}
			</div>
		</div>
	}

	<div id="sectionPage" class="tab-pane fade in @(sectionPageActive)">
		<div class="row form-group text-left-md text-left-lg">

			<h3 class="col-md-offset-3 col-md-9 bg-success">Basic Page Fields</h3>

			<div class="form-group">
				@Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.Name, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.PageTitle, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.PageTitle, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.PageTitle, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.Url, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.Url, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.ForAnonymousOnly, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.ForAnonymousOnly, new { htmlAttributes = new { @class = "form-control", disabled = true, @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.ForAnonymousOnly, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.ForRegisteredOnly, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.ForRegisteredOnly, new { htmlAttributes = new { @class = "form-control", disabled = true, @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.ForRegisteredOnly, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.Order, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.Order, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.Order, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

		</div>
	</div>

	<div id="sectionTheme" class="tab-pane fade in@(sectionThemeActive)">
		<div class="row form-group text-left-md text-left-lg">

			<h3 class="col-md-offset-3 col-md-9 bg-success">Theme and Template</h3>

			<div class="form-group">
				@Html.LabelFor(model => model.ThemeId, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.DropDownList("ThemeId", themeList, htmlAttributes: new { @class = "form-control", disabled = true, @readonly = "readonly" })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.ThemeId, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.PageTemplateId, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.DropDownList("PageTemplateId", pageTemplateList, htmlAttributes: new { @class = "form-control", disabled = true, @readonly = "readonly" })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.PageTemplateId, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>
		</div>
	</div>

	<div id="sectionMeta" class="tab-pane fade in@(sectionMetaActive)">
		<div class="row form-group text-left-md text-left-lg">
			<h3 class="col-md-offset-3 col-md-9 bg-success">Meta Tags</h3>

			<div class="form-group">
				@Html.LabelFor(model => model.MetaKeywords, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.MetaKeywords, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.MetaKeywords, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.MetaDescription, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.MetaDescription, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.MetaDescription, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.MetaApplicationName, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.MetaApplicationName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.MetaApplicationName, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.MetaApplicationTileColor, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.MetaApplicationTileColor, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.MetaApplicationTileColor, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.BodyTopScriptTag, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.TextAreaFor(model => model.BodyTopScriptTag, new { @class = "form-control", @readonly = "readonly", rows = 8 })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.BodyTopScriptTag, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.BodyBottomScriptTag, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.TextAreaFor(model => model.BodyBottomScriptTag, new { @class = "form-control", @readonly = "readonly", rows = 8 })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.BodyBottomScriptTag, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>
		</div>
	</div>

	<div id="sectionForm" class="tab-pane fade in@(sectionFormActive)">
		<div class="row form-group text-left-md text-left-lg">
			<h3 class="col-md-offset-3 col-md-9 bg-success">Form</h3>

			<div class="form-group">
				@Html.LabelFor(model => model.WebFormId, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.DropDownList("WebFormId", webFormList, htmlAttributes: new { @class = "form-control", disabled = true, @readonly = "readonly" })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.WebFormId, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			@{
				if (Model.WebFormId.HasValue && Html.UserHasPermissionToAny(GStoreAction.WebForms_Edit, GStoreAction.WebForms_View))
				{
					<div class="form-group">
						<label class="text-right control-label col-md-3">Web Form Fields</label>
						<div class="col-md-9 text-left">
							@{
					if (Model.OriginalWebForm != null && Model.OriginalWebForm.WebFormFields != null)
					{
						@:Active Fields: @(Model.OriginalWebForm.WebFormFields.AsQueryable().WhereIsActive().Count().ToString("N0"))
								@:&nbsp;&nbsp;|&nbsp;&nbsp;
								@:Total Fields: @(Model.OriginalWebForm.WebFormFields.AsQueryable().Count().ToString("N0"))
								<br />
					}
							}
							@{
					if (Html.UserHasPermission(GStoreAction.WebForms_View))
					{
						@Html.ActionLink("View Web Form", "Details", "WebFormAdmin", new { area = "StoreAdmin", id = Model.WebFormId }, new { @class = "btn btn-sm btn-success" })
								@:&nbsp;&nbsp;|&nbsp;&nbsp;
								@Html.ActionLink("View Fields", "Details", "WebFormAdmin", new { area = "StoreAdmin", id = Model.WebFormId, Tab = "fields" }, new { @class = "btn btn-sm btn-success" })
								@:&nbsp;&nbsp;|&nbsp;&nbsp;
						}
					if (Html.UserHasPermission(GStoreAction.WebForms_Edit))
					{
						@Html.ActionLink("Edit Web Form", "Edit", "WebFormAdmin", new { area = "StoreAdmin", id = Model.WebFormId }, new { @class = "btn btn-sm btn-warning" })
								@:&nbsp;&nbsp;|&nbsp;&nbsp;
								@Html.ActionLink("Edit Fields", "Edit", "WebFormAdmin", new { area = "StoreAdmin", id = Model.WebFormId, Tab = "fields" }, new { @class = "btn btn-sm btn-warning" })
					}
					if (Html.UserHasPermission(GStoreAction.WebForms_Create))
					{
						@:&nbsp;&nbsp;|&nbsp;&nbsp;
								@Html.ActionLink("Create a New Web Form", "Create", "WebFormAdmin", new { area = "StoreAdmin" }, new { @class = "btn btn-sm btn-info" })
					}
							}
						</div>
						<div class="row">
							<label class="col-md-offset-3 col-md-9 help-label">View and edit fields for the current form. Save changes before clicking these links.</label>
						</div>
					</div>
				}
			}


			<div class="form-group">
				@Html.LabelFor(model => model.WebFormSaveToDatabase, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.WebFormSaveToDatabase, new { htmlAttributes = new { @class = "form-control", disabled = "disabled", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.WebFormSaveToDatabase, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.WebFormSaveToFile, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.WebFormSaveToFile, new { htmlAttributes = new { @class = "form-control", disabled = "disabled", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.WebFormSaveToFile, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.WebFormSendToEmail, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.WebFormSendToEmail, new { htmlAttributes = new { @class = "form-control", disabled = "disabled", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.WebFormSendToEmail, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>


			<div class="form-group">
				@Html.LabelFor(model => model.WebFormThankYouTitle, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.WebFormThankYouTitle, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.WebFormThankYouTitle, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.WebFormThankYouMessage, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.WebFormThankYouMessage, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.WebFormThankYouMessage, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.WebFormSuccessPageId, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.DropDownList("WebFormSuccessPageId", webFormSuccessPageList, htmlAttributes: new { @class = "form-control", disabled = true, @readonly = "readonly" })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.WebFormSuccessPageId, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.WebFormEmailToAddress, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.WebFormEmailToAddress, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.WebFormEmailToAddress, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.WebFormEmailToName, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.WebFormEmailToName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.WebFormEmailToName, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>
		</div>
	</div>

	<div id="sectionActivation" class="tab-pane fade in@(sectionActivationActive)">
		<div class="row form-group text-left-md text-left-lg">
			<h3 class="col-md-offset-3 col-md-9 bg-success">Activation</h3>

			<p class="col-md-offset-3 col-md-9">Store Local Time: @(DateTime.UtcNow.ToStoreDateTimeString(Html))</p>
			<p class="col-md-offset-3 col-md-9">Current UTC Time: @(DateTime.UtcNow.ToString())</p>

			<div class="form-group">
				<label class="text-right control-label col-md-3">Status</label>
				<div class="col-md-9 text-left">
					<p style="padding-top: 5px;">
						<strong class="@(Model.IsActiveDirect ? "text-success" : "text-warning")">@(Model.IsActiveDirect ? "Active" : "Inactive")</strong>
					</p>
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.IsActiveDirect, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.IsPending, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.IsPending, new { htmlAttributes = new { @class = "form-control", disabled = "disabled", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.IsPending, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.StartDateTimeUtc, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.StartDateTimeUtc, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.StartDateTimeUtc, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.EndDateTimeUtc, htmlAttributes: new { @class = "text-right control-label col-md-3" })
				<div class="col-md-9 text-left">
					@Html.EditorFor(model => model.EndDateTimeUtc, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
				</div>
				<div class="row">
					@Html.HelpLabelFor(model => model.EndDateTimeUtc, htmlAttributes: new { @class = "col-md-offset-3 col-md-9 help-label" })
				</div>
			</div>


		</div>
	</div>

</div>
