@model PageEditViewModel
@{
	//MvcHtmlString prefix = new MvcHtmlString("viewModel[" + Model.Index + "].");
	List<SelectListItem> themeList = Model.ThemeSelectList;
	List<SelectListItem> pageTemplateList = Model.PageTemplateSelectList;
	List<SelectListItem> webFormList = Model.WebFormSelectList;
	List<SelectListItem> webFormSuccessPageList = Model.WebFormSuccessPageSelectList;

	bool showRefresh = true;
	bool showContentTab = true;
	bool showCancelTab = false;
	bool showSaveCancelButtons = true;
	bool displayUserMessages = true;

	string sectionPageActive = string.Empty;
	string sectionContentActive = string.Empty;
	string sectionVariablesActive = string.Empty;
	string sectionThemeActive = string.Empty;
	string sectionMetaActive = string.Empty;
	string sectionFormActive = string.Empty;
	string sectionActivationActive = string.Empty;

	string containerClasses = "";
	if (ViewData.ModelState != null && !ViewData.ModelState.IsValid)
	{
		containerClasses += " modelinvalid";
		if (Html.CurrentUserProfile(false).AspNetIdentityUserIsInRoleSystemAdmin())
		{
			string valErrors = ViewData.ModelState.ErrorDetails();
			Html.BaseControllerOrThrow().AddUserMessageBottom("Validation errors", valErrors.ToHtmlLines(), UserMessageType.Danger);
		}
	}

	switch ((Model.ActiveTab ?? string.Empty).Trim().ToLower())
	{
		case "page":
			sectionPageActive = " active";
			break;
		case "content":
			sectionContentActive = " active";
			break;
		case "variables":
			sectionVariablesActive = " active";
			break;
		case "theme":
			sectionThemeActive = " active";
			break;
		case "meta":
			sectionMetaActive = " active";
			break;
		case "form":
			sectionFormActive = " active";
			break;
		case "activation":
			sectionActivationActive = " active";
			break;

		default:
			goto case "page";
	}

	MvcHtmlString cancelUrl = null;
	MvcHtmlString refreshUrl = null;
	if (!Model.IsStoreAdminEdit)
	{
		cancelUrl = new MvcHtmlString(Url.Action("Display", new { DynamicPageUrl = Model.OriginalPageUrl }).Replace("//", "/"));
		refreshUrl = new MvcHtmlString(Url.Action("Edit", new { DynamicPageUrl = Model.OriginalPageUrl, Tab = "XXXX" }));
	}
	else
	{
		showContentTab = false;
		showRefresh = false;
		cancelUrl = new MvcHtmlString(Url.Action("Manager"));
		if (Model.IsCreatePage)
		{
			showSaveCancelButtons = false;
			showRefresh = false;
			displayUserMessages = false;
		}
		else
		{
			refreshUrl = new MvcHtmlString(Url.Action("Edit", new { id = Model.PageId }));
		}
	}

	bool showVariables = (Model.Variables != null && Model.Variables.Count != 0);

	ViewData.SetColDisplay(1, 2, 9);

}
<style>
	.form-group .form-control
	{
		padding-top: 0;
		margin-top: 0;
		padding-bottom: 0;
	}

	.form-group label
	{
		padding-top: 0;
		padding-bottom: 0;
		margin-bottom: 0;
	}

	.form-group .help-label
	{
		margin-right: 0;
		padding-left: 30px;
	}
</style>
<script>
	$(document).ready(function () { $('[data-toggle="popover"]').popover(); });

	@{
		@:$(document).ready(function () { HideFormPreview(); });
		if (sectionContentActive.Length == 0)
		{
			@:$(document).ready(function () { HidePageSections(); HideFormPreview(); });
		}
		else
		{
			@:$(document).ready(function () { ShowPageSections(); ShowFormPreview(); });
		}
	}
	function ShowPageSections() {
		if (document.getElementById('PageContent')) {
			document.getElementById('PageContent').hidden = false;
		}
	}
	function HidePageSections() {
		if (document.getElementById('PageContent')) {
			document.getElementById('PageContent').hidden = true;
		}
	}
	function HideFormPreview() {
		if (document.getElementById('PageForm')) {
			document.getElementById('PageForm').hidden = true;
		}
	}
	function ShowFormPreview()
	{
		if (document.getElementById('PageForm'))
		{
			document.getElementById('PageForm').hidden = false;
		}
	}

	function ConfirmResetToDefault()
	{
		return confirm("Are you SURE you want to reset this page to the default values?");
	}
	function MakeItActive()
	{
		var startDateTime = @(Html.Raw(DateTime.UtcNow.AddMinutes(-1).ToString().ToJavaScriptString(true)));
		var endDateTime = @(Html.Raw(DateTime.UtcNow.AddYears(100).ToString().ToJavaScriptString(true)));
		if (document.getElementById('IsPending'))
		{
			document.getElementById('IsPending').checked = false;
		}
		if (document.getElementById('PageEditViewModel_IsPending'))
		{
			document.getElementById('PageEditViewModel_IsPending').checked = false;
		}
		if (document.getElementById('StartDateTimeUtc'))
		{
			document.getElementById('StartDateTimeUtc').value = startDateTime;
		}
		if (document.getElementById('PageEditViewModel_StartDateTimeUtc'))
		{
			document.getElementById('PageEditViewModel_StartDateTimeUtc').value = startDateTime;
		}
		if (document.getElementById('EndDateTimeUtc'))
		{
			document.getElementById('EndDateTimeUtc').value = endDateTime;
		}
		if (document.getElementById('PageEditViewModel_EndDateTimeUtc'))
		{
			document.getElementById('PageEditViewModel_EndDateTimeUtc').value = endDateTime;
		}
	}

	function SetActiveTab(tabName)
	{
		if (document.getElementById('PageEditViewModel_ActiveTab'))
		{
			document.getElementById('PageEditViewModel_ActiveTab').value = tabName;
		}
		if (document.getElementById('ActiveTab'))
		{
			document.getElementById('ActiveTab').value = tabName;
		}
	}

	@{
		if (showRefresh)
		{
			@:function RefreshPage()
															@:{
															@:	var url = '@(refreshUrl.ToHtmlString().ToJavaScriptString())';
															@:	if (document.getElementById('PageEditViewModel_ActiveTab'))
																					@:	{
																					@:		url = url.replace("XXXX", document.getElementById("PageEditViewModel_ActiveTab").value);
																					@:	}
																					@:	else if (document.getElementById("ActiveTab"))
																											@:	{
																											@:		url = url.replace("XXXX", document.getElementById("ActiveTab").value);
																											@:	}
															@:	document.location.href = url;
															@:}
								}
}
</script>
<div class="@(containerClasses)">
	<div class="row">
		<div class="col-md-offset-2 col-md-8 text-left">
			@Html.AntiForgeryToken()
			@Html.ValidationSummary(false, "", new { @class = "text-danger" })
			@Html.HiddenFor(model => model.ActiveTab)
		</div>
	</div>

	<ul class="nav nav-tabs row col-md-offset-2 col-md-10" style="width:100%">
		<li class="@(sectionPageActive)"><a data-toggle="tab" href="#sectionPage" onclick="SetActiveTab('Page');HidePageSections();">Page</a></li>
		<li class="@(sectionThemeActive)"><a data-toggle="tab" href="#sectionTheme" onclick="SetActiveTab('Theme');HidePageSections();">Theme</a></li>
		<li class="@(sectionMetaActive)"><a data-toggle="tab" href="#sectionMeta" onclick="SetActiveTab('Meta');HidePageSections();">Meta</a></li>
		<li class="@(sectionFormActive)"><a data-toggle="tab" href="#sectionForm" onclick="SetActiveTab('Form');HidePageSections();">Form</a></li>
		<li class="@(sectionActivationActive)"><a data-toggle="tab" href="#sectionActivation" onclick="SetActiveTab('Activation');HidePageSections()">Activation</a></li>
		@{
			if (showContentTab)
			{
				<li class="@(sectionContentActive)"><a data-toggle="tab" href="#sectionContent" onclick="SetActiveTab('Content');ShowPageSections();">Content</a></li>
			}
			if (showVariables)
			{
				<li class="@(sectionVariablesActive)"><a data-toggle="tab" href="#sectionVariables" onclick="SetActiveTab('Variables');HidePageSections();">Variables</a></li>
			}
		}
		@{
			if (showCancelTab)
			{
				<li class=""><a href="@(cancelUrl)"><u>Cancel</u></a></li>
			}
		}
		@{
			if (showRefresh)
			{
				<li class=""><a href="#" onclick="RefreshPage()"><u>Refresh</u></a></li>
			}

			if (!Model.IsCreatePage && Model.IsActiveBubble)
			{
				<li class=""><a target="_blank" href="@(Url.GStoreLocalUrl(Model.OriginalPageUrl))"><u>Live Page <small>(new window to site)</small></u></a></li>
			}

			if (Model.IsStoreAdminEdit)
			{
				if (!Model.IsCreatePage && Model.IsActiveBubble)
				{
					<li class=""><a target="_blank" href="@(Url.GStoreLocalUrl("/Edit/" + Model.OriginalPageUrl.Trim('~').Trim('/')))?Tab=Content"><u>Content <small>(new window to site)</small></u></a></li>
					<li class=""><a href="@(Url.GStoreLocalUrl("/Edit/" + Model.OriginalPageUrl.Trim('~').Trim('/')))"><u>Edit in Site</u></a></li>
				}
			}
			else
			{
				if (Html.UserHasPermission(GStoreAction.Pages_Edit))
				{
					<li class=""><a href="@(Url.Action("Edit", new { id = Model.PageId , controller = "PageAdmin", area = "StoreAdmin"} ))"><u>Edit in Store Admin</u></a></li>
				}
			}
		}
		@if (!Model.IsCreatePage)
		{
			<li class="">
				<a href="@(Url.Action("Edit", new { ResetContentToDefault = true }))" onclick="return ConfirmResetToDefault();"><u>Reset Content to Defaults</u></a>
			</li>
		}
	</ul>







	<div class="tab-content">

		<div id="sectionContent" class="tab-pane fade in@(sectionContentActive)">
			<div class="row form-group text-left-md text-left-lg">
				<h3 class="col-md-offset-2 col-md-8 bg-warning">Page Content</h3>
			</div>
		</div>

		@if (showVariables)
		{
			<div id="sectionVariables" class="tab-pane fade in@(sectionVariablesActive)">
				<div class="row form-group text-left-md text-left-lg">
					<h3 class="col-md-offset-2 col-md-8 bg-warning">Variables</h3>
				</div>
				@{
					int variableIndex = 0;
					PageVariableEditViewModel[] variables = Model.Variables.ToArray();
				}
				@foreach (PageVariableEditViewModel variable in Model.Variables)
				{
					try
					{
						@Html.EditorFor(model => variables[variableIndex], "PageVariableEditViewModel", new { index = variableIndex })
					}
					catch (Exception)
					{
						@:Error displaying variable editor<br/>
					}
					variableIndex++;
				}

				@{
					if (showSaveCancelButtons)
					{
						<div class="row">
							<div class="form-actions col-md-offset-2 col-md-8">
								<input type="submit" value="Save" class="btn btn-warning" />
								&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
								<a class="btn btn-default" href="@(cancelUrl)">Cancel</a>
								@{
						if (showRefresh)
						{
							@:&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
									<a class="btn btn-primary" href="@(refreshUrl)">Refresh this Page</a>
						}
								}
							</div>
						</div>
					}
				}
			</div>
		}

		<div id="sectionPage" class="tab-pane fade in @(sectionPageActive)">
			<div class="row form-group text-left-md text-left-lg">
				<h3 class="col-md-offset-2 col-md-8 bg-warning">Basic Page Fields</h3>

				@Html.EditorFor(model => model.Name, "FieldText")
				@Html.EditorFor(model => model.PageTitle, "FieldText")
				@Html.EditorFor(model => model.Url, "FieldText")
				@Html.EditorFor(model => model.ForAnonymousOnly, "FieldCheckbox")
				@Html.EditorFor(model => model.ForRegisteredOnly, "FieldCheckbox")
				@Html.EditorFor(model => model.Order, "FieldInt")
				@Html.EditorFor(model => model.PageId, "FieldKey")

				@{
					if (Model.IsCreatePage)
					{
						<div class="form-group">
							@Html.LabelFor(model => model.CreateMenuItemWithPage, htmlAttributes: new { @class = "control-label col-md-3" })
							<div class="col-md-9 text-left">
								@Html.EditorFor(model => model.CreateMenuItemWithPage, new { htmlAttributes = new { @class = "form-control" } })
								@Html.ValidationMessageFor(model => model.CreateMenuItemWithPage, "", new { @class = "text-danger" })
							</div>
							<div class="row">
								@Html.HelpLabelFor(model => model.CreateMenuItemWithPage, htmlAttributes: new { @class = "col-md-offset-2 col-md-8 help-label" })
							</div>
						</div>
					}
				}

			</div>

			@{
				if (showSaveCancelButtons)
				{
					<div class="row">
						<div class="form-actions col-md-offset-2 col-md-8">
							<input type="submit" value="Save" class="btn btn-warning" />
							&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
							<a class="btn btn-default" href="@(cancelUrl)">Cancel</a>
							@{
					if (showRefresh)
					{
						@:&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
								<a class="btn btn-primary" href="@(refreshUrl)">Refresh this Page</a>
					}
							}
						</div>
					</div>
				}
			}
		</div>

		<div id="sectionTheme" class="tab-pane fade in@(sectionThemeActive)">
			<div class="row form-group text-left-md text-left-lg">
				<h3 class="col-md-offset-2 col-md-8 bg-warning">Theme and Template</h3>

				@Html.EditorFor(model => model.ThemeId, "FieldThemeId")
				@Html.EditorFor(model => model.PageTemplateId, "FieldPageTemplateId")
				@{
					if (showSaveCancelButtons)
					{
						<div class="row">
							<div class="form-actions col-md-offset-2 col-md-8">
								<input type="submit" value="Save" class="btn btn-warning" />
								&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
								<a class="btn btn-default" href="@(cancelUrl)">Cancel</a>
								@{
						if (showRefresh)
						{
							@:&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
									<a class="btn btn-primary" href="@(refreshUrl)">Refresh this Page</a>
						}
								}
							</div>
						</div>
					}
				}
			</div>
		</div>

		<div id="sectionMeta" class="tab-pane fade in@(sectionMetaActive)">
			<div class="row form-group text-left-md text-left-lg">
				<h3 class="col-md-offset-2 col-md-8 bg-warning">Meta Tags</h3>

				@Html.EditorFor(model => model.MetaKeywords, "FieldTextArea")
				@Html.EditorFor(model => model.MetaDescription, "FieldTextArea")
				@Html.EditorFor(model => model.MetaApplicationName, "FieldText")
				@Html.EditorFor(model => model.MetaApplicationTileColor, "FieldText")
				@Html.EditorFor(model => model.BodyTopScriptTag, "FieldTextArea")
				@Html.EditorFor(model => model.BodyBottomScriptTag, "FieldTextArea")

			</div>

			@{
				if (showSaveCancelButtons)
				{
					<div class="row">
						<div class="form-actions col-md-offset-2 col-md-8">
							<input type="submit" value="Save" class="btn btn-warning" />
							&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
							<a class="btn btn-default" href="@(cancelUrl)">Cancel</a>
							@{
					if (showRefresh)
					{
						@:&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
								<a class="btn btn-primary" href="@(refreshUrl)">Refresh this Page</a>
					}
							}
						</div>
					</div>
				}
			}
		</div>

		<div id="sectionForm" class="tab-pane fade in@(sectionFormActive)">
			<div class="row form-group text-left-md text-left-lg">
				<h3 class="col-md-offset-2 col-md-8 bg-warning">Form</h3>

				@Html.EditorFor(model => model.WebFormId, "FieldWebFormIdNullable")

				@{
					if (Model.WebFormId.HasValue && Html.UserHasPermissionToAny(GStoreAction.WebForms_Edit, GStoreAction.WebForms_View))
					{
						<div class="form-group">
							<label class="text-right control-label col-md-3">Web Form Fields</label>
							<div class="col-md-9 text-left">
								@{
						if (Model.OriginalWebForm != null && Model.OriginalWebForm.WebFormFields != null)
						{
							@:Active Fields: @(Model.OriginalWebForm.WebFormFields.AsQueryable().WhereIsActive().Count().ToString("N0"))
									@:&nbsp;&nbsp;|&nbsp;&nbsp;
									@:Total Fields: @(Model.OriginalWebForm.WebFormFields.AsQueryable().Count().ToString("N0"))
									<br />
						}
								}
								@{
						if (Html.UserHasPermission(GStoreAction.WebForms_View))
						{
							@Html.ActionLink("View Web Form", "Details", "WebFormAdmin", new { area = "StoreAdmin", id = Model.WebFormId }, new { @class = "btn btn-sm btn-success", target = "_blank" })
									@:&nbsp;&nbsp;|&nbsp;&nbsp;
									@Html.ActionLink("View Fields", "Details", "WebFormAdmin", new { area = "StoreAdmin", id = Model.WebFormId, Tab = "fields" }, new { @class = "btn btn-sm btn-success", target = "_blank" })
									@:&nbsp;&nbsp;|&nbsp;&nbsp;
								}
						if (Html.UserHasPermission(GStoreAction.WebForms_Edit))
						{
							@Html.ActionLink("Edit Web Form", "Edit", "WebFormAdmin", new { area = "StoreAdmin", id = Model.WebFormId }, new { @class = "btn btn-sm btn-warning", target = "_blank" })
									@:&nbsp;&nbsp;|&nbsp;&nbsp;
									@Html.ActionLink("Edit Fields", "Edit", "WebFormAdmin", new { area = "StoreAdmin", id = Model.WebFormId, Tab = "fields" }, new { @class = "btn btn-sm btn-warning", target = "_blank" })
						}
						if (Html.UserHasPermission(GStoreAction.WebForms_Create))
						{
							@:&nbsp;&nbsp;|&nbsp;&nbsp;
									@Html.ActionLink("Create a New Web Form", "Create", "WebFormAdmin", new { area = "StoreAdmin" }, new { @class = "btn btn-sm btn-info", target = "_blank" })
						}
								}
							</div>
							<div class="row">
								<label class="col-md-offset-2 col-md-8 help-label">These links open in a new window. If you create a new web form, be sure to save this page after you add the new form to see it in the list.</label>
							</div>
						</div>
					}
					else if (!Model.IsCreatePage && Html.UserHasPermission(GStoreAction.WebForms_Create))
					{
						<div class="form-group">
							@Html.LabelFor(model => model.WebFormId, htmlAttributes: new { @class = "control-label col-md-3" })
							<div class="col-md-9 text-left">
								@Html.ActionLink("Create a New Web Form", "Create", "WebFormAdmin", new { area = "StoreAdmin" }, new { @class = "btn btn-sm btn-info", target = "_blank" })
							</div>
							<div class="row">
								<label class="col-md-offset-2 col-md-8 help-label">This link opens in a new window. If you create a new web form, be sure to save this page after you add the new form to see it in the list.</label>
							</div>
						</div>
					}
				}

				@Html.EditorFor(model => model.WebFormSaveToDatabase, "FieldCheckbox")
				@Html.EditorFor(model => model.WebFormSaveToFile, "FieldCheckbox")
				@Html.EditorFor(model => model.WebFormSendToEmail, "FieldCheckbox")
				@Html.EditorFor(model => model.WebFormThankYouTitle, "FieldText")
				@Html.EditorFor(model => model.WebFormThankYouMessage, "FieldHtml")
				@Html.EditorFor(model => model.WebFormSuccessPageId, "FieldPageIdNullable")
				@Html.EditorFor(model => model.WebFormEmailToAddress, "FieldEmail")
				@Html.EditorFor(model => model.WebFormEmailToName, "FieldText")

			</div>

			@{
				if (showSaveCancelButtons)
				{
					<div class="row">
						<div class="form-actions col-md-offset-2 col-md-8">
							<input type="submit" value="Save" class="btn btn-warning" />
							&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
							<a class="btn btn-default" href="@(cancelUrl)">Cancel</a>
							@{
					if (showRefresh)
					{
						@:&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
								<a class="btn btn-primary" href="@(refreshUrl)">Refresh this Page</a>
					}
							}
						</div>
					</div>
				}
			}
		</div>

		<div id="sectionActivation" class="tab-pane fade in@(sectionActivationActive)">
			<div class="row form-group text-left-md text-left-lg">
				<h3 class="col-md-offset-2 col-md-8 bg-warning">Activation</h3>
				<h4 class="col-md-offset-2 col-md-8 text-warning">
					Warning: editing these values incorrectly will make this page disappear from your site and only be editable from the Store Admin Menu.<br />
					If you have a problem, keep in mind you can edit this page in the Store Admin menu even if you de-activate it.<br />
					If you are unsure what to do, click the "Make It Active Now" button to turn the page on with default values.
				</h4>

				<p class="col-md-offset-3 col-md-8">Store Local Time: @(DateTime.UtcNow.ToStoreDateTimeString(Html))</p>
				<p class="col-md-offset-2 col-md-8">Current UTC Time: @(DateTime.UtcNow.ToString())</p>

				<div class="form-group">
					<label class="text-right control-label col-md-3">Status</label>
					<div class="col-md-9 text-left">
						<p>
							<strong class="@(Model.IsActiveDirect ? "text-success" : "text-warning")">@(Model.IsActiveDirect ? "Active" : "Inactive")</strong>
							@{

								if (!Model.IsCreatePage)
								{
									<input type="button" id="MakeItActiveButton" onclick="MakeItActive();" class="btn btn-sm btn-success" value="Make it Active Now" />
								}
							}
						</p>
					</div>
					<div class="row">
						@Html.HelpLabelFor(model => model.IsActiveDirect, htmlAttributes: new { @class = "col-md-offset-2 col-md-8 help-label" })
					</div>
				</div>

				@Html.EditorFor(model => model.IsPending, "FieldCheckbox")
				@Html.EditorFor(model => model.StartDateTimeUtc, "FieldDateTime")
				@Html.EditorFor(model => model.EndDateTimeUtc, "FieldDateTime")

			</div>
			@{
				if (showSaveCancelButtons)
				{
					<div class="row">
						<div class="form-actions col-md-offset-2 col-md-8">
							<input type="submit" value="Save" class="btn btn-warning" />
							&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
							<a class="btn btn-default" href="@(cancelUrl)">Cancel</a>
							@{
					if (showRefresh)
					{
						@:&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;
								<a class="btn btn-primary" href="@(refreshUrl)">Refresh this Page</a>
					}
							}
						</div>
					</div>
				}
			}
		</div>
	</div>
</div>
@{
	if (displayUserMessages)
	{
		@Html.RenderUserMessages()
	}
}
